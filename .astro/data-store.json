[["Map",1,2,9,10,101,102],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.10.0","content-config-digest","7f04a0308cbc1c9d","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://geetansh.site\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,29,30,40,41,52,53,63,64,76,77,91,92],"dsa",{"id":11,"data":13,"body":25,"filePath":26,"digest":27,"deferredRender":28},{"pubDatetime":14,"series":15,"image":16,"title":17,"draft":18,"tags":19,"category":20,"description":24},["Date","2024-04-19T00:00:00.000Z"],"backend-journey","/og-images/articles/dsa.jpg","Does Data Structures and Algorithms Matter in Backend? No BS Answer!",false,[20,21,22,23],"backend","learning","webdev","career","Exploring the real importance of data structures and algorithms in backend engineering—beyond just interviews.","![Cover Image](/og-images/articles/dsa.jpg)\n\n## Introduction: \nHave you ever wondered whether data structures and algorithms (DSA) truly matter in backend engineering? The answers you've heard might seem vague or inconclusive and they all say \"It depends...\", \"It's needed for interview never needed later...\". But fear not, because I'm here to provide a clear answer.\n\nDSA is a hot topic in the tech world, but its relevance can sometimes feel elusive. In this blog, we're going to unravel the mystery and discover the real importance of DSA in backend development.\n\n## Integrator vs Core Backend Engineer\n\nIn my humble opinion that is mainly inspired form a YouTube video titled: [How Important are Algorithms and Data Structures in Backend Engineering?](https://www.youtube.com/watch?v=pG_twkFN6iE&t=17s&pp=ygUcZG8gdSBuZWVkIGRzYSBodXNzZWluIG5hc3Nlcg%3D%3D) by **Hussein Nasser**.\n\nI deeply believe that in the realm of backend engineering, there is two types of engineers\n\n1. **Integrator**: Who resembles 80% of backend engineers out there, and most of backend engineering roles in the market are integrating roles! what I mean by integrator backend engineer is the person who brings together various backend components to create functional applications. They integrate web frameworks with databases, set up APIs, and configure servers to deliver seamless user experiences. While they will not delve as deeply as core backend engineers into the intricacies of how different components they are integrating, like as a backend engineer who is responsible for developing the backend infrastructure for a SaaS product he is not obliged to understand how Database engines implement B-tree or how the web framework he is using is built form the ground-up.\n\n2. **Core Backend Engineer**: And those represent the rest 20% of backend engineers, who are responsible for building the core components that integrators combine together, like the engineers building and maintaining MongoDB database engine or the engineers behind Nginx web server and examples are endless.\n\n\n## When you really need to master DSA:\n\nshort answer is When you're responsible for building foundational components like database engines, a deep understanding of DSA becomes indispensable. \nFor instance, if you're developing a database engine, you must grasp concepts like B-Trees and hashing. These tools enable efficient data organization and retrieval, ensuring the smooth operation of the database.\nOn the other hand, if your role involves integrating existing databases into applications, the need for mastering DSA diminishes. While a basic understanding might be helpful for optimizing queries or managing data efficiently, it's not a prerequisite for success.\n\n**Embarking on my DSA Learning Journey:**\nData Structures and Algorithms is a huge topic that people are getting PHDs doing research on! That's why I charted out a basic path to (DSA) learning, inspired by resources like:\n- [Raodmap.sh](https://roadmap.sh/datastructures-and-algorithms)\n- [Mosh Hamedani DSA Course](https://codewithmosh.com/p/data-structures-algorithms)\n\nand my path will be as follows:\n\n1. **Picking a Programming Language**: The beauty of learning DSA is that you can pick almost any programming language to get started. Whether it's Python, Java, C#, C, or Rust, the principles remain the same. For me, Java holds a special place—it's a language I'm comfortable with and enjoy coding in.\n\n2. **Understanding Algorithm Complexity**: Before diving into specific data structures and algorithms, it's crucial to grasp the fundamentals. Understanding algorithm complexity and it's measuring systems like \"Big O Notation\" helps you evaluate the efficiency of your code and make informed decisions.\n\n3. **Basic Data Structures**: Start with the basics—the building blocks of DSA. Arrays, linked lists, stacks, queues, and hash tables form the foundation of many algorithms and data structures.\n\n4. **Sorting Algorithms**: Sorting is a fundamental operation in computer science, and there are various algorithms to achieve it. Learning sorting algorithms like bubble sort, insertion sort, and quicksort equips you with valuable problem-solving skills.\n\n5. **Search Algorithms**: Searching for elements within data structures is another essential skill. Dive into search algorithms like linear search, binary search, and interpolation search to understand their workings and applications.\n\n6. **Tree Data Structures**: Trees are hierarchical structures that find applications in various domains. Explore binary trees, binary search trees, B-trees, AVL trees, and related algorithms to understand their nuances and optimize operations.\n\n7. **Graph Data Structures**: Graphs are versatile structures used to model relationships between objects. Understand directed and undirected graphs, along with algorithms like depth-first search (DFS) and breadth-first search (BFS), to tackle graph-related problems effectively.\n\n[Simple DSA Roadmap I made](https://roadmap.sh/r?id=66229e9380911d3b695736f2)\n\n---\n\n![My Own DSA Roadmap](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fd4t32phrvwcjy4f8wov.png)\n\n---\n\n## Consusion: \n\nDSA isn't just a subject—it's a way of thinking. That's why I'm on a journey to learn it continuously, alongside other backend topics and I'll make it kind of sub-journey of hte  main backend journey. Each milestone I reach in DSA will be a stepping stone, documented in a new blog post. Next Blog will be **Java 101**.","src/data/blog/dsa.mdx","03ccd016345476f2",true,"database-design",{"id":29,"data":31,"body":37,"filePath":38,"digest":39,"deferredRender":28},{"pubDatetime":32,"series":15,"image":33,"title":34,"draft":18,"tags":35,"category":20,"description":36},["Date","2024-05-08T00:00:00.000Z"],"/og-images/articles/databse-design.jpg","Mastering Relational Database Design | A Comprehensive Guide",[20,21,22,23],"An introduction to relational databases, their management systems, and key design principles for efficient data storage and organization.","![Cover Image](/og-images/articles/database-design.jpg)\n\n\n## Introduction\n\nIn today's data-driven world, storing and managing information efficiently is crucial for businesses and organizations of all sizes. Relational databases have emerged as a powerful solution for organizing and manipulating data in a structured and scalable manner. In this blog post, we'll explore the fundamentals of relational databases, their management systems, and the principles that underpin effective database design.\n\n---\n\n## What is a Database?\n\nA database is a structured collection of data that is organized and stored in a way that facilitates efficient retrieval, manipulation, and management. Think of it as a digital filing cabinet, where instead of physical folders and documents, you have tables and records neatly organized for easy access.\n\n## What is a Relational Database?\n\nA relational database is a type of database that organizes data into tables (relations) with rows (records) and columns (fields). These tables are interconnected through relationships, allowing data to be accessed and combined in various ways. Imagine a collection of spreadsheets, each representing a different aspect of your data, but with the ability to link and combine information across them seamlessly.\n\n## RDBMS\n\nA Relational Database Management System (RDBMS) is a software application designed to create, manage, and interact with relational databases. It provides a structured framework for storing, retrieving, and manipulating data within the database. Some popular examples of RDBMS include MySQL, PostgreSQL, Oracle, and Microsoft SQL Server.\n\n---\n\n## Introduction to SQL\n\nSQL (Structured Query Language) is the standard programming language used to interact with relational databases. It allows you to create, read, update, and delete data within the database, as well as define and modify the database structure itself. SQL is like a universal language that enables you to communicate with different RDBMS platforms.\n\n## Naming Conventions\n\nIn SQL, following consistent naming conventions is crucial for clarity and maintainability. Here's an example:\n\n```sql\n-- Good naming conventions\nCREATE TABLE customers (\n   customer_id INT PRIMARY KEY,\n   first_name VARCHAR(100),\n   last_name VARCHAR(100),\n   email VARCHAR(100)\n);\n```\n\n## What is Database Design?\n\nDatabase design is the process of creating an efficient and organized structure for storing and managing data in a database. It involves defining tables, columns, relationships, and constraints to ensure data integrity, minimize redundancy, and optimize performance. Proper database design is the foundation for building robust and scalable applications.\n\n![Database Design Image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/de0l7km0yufdp2ssak3s.png)\n\n## Data Integrity\n\nData integrity refers to the accuracy, consistency, and reliability of data stored in a database. It ensures that the data follows specific rules and constraints, preventing errors and inconsistencies. There are three types of data integrity:\n\n1. **Entity Integrity**: Ensures each row in a table is uniquely identifiable by a primary key, and the primary key cannot have null values.\n2. **Referential Integrity**: Maintains relationships between tables by ensuring foreign key values in one table match the primary key values in another table.\n3. **Domain Integrity**: Enforces valid entries for a given column by restricting the data type, format, and range of values that can be stored.\n\n```sql\n-- Example: Enforcing data integrity\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY, -- Entity integrity\n    customer_id INT FOREIGN KEY REFERENCES customers(customer_id), -- Referential integrity\n    order_date DATE NOT NULL, -- Domain integrity\n    total_amount DECIMAL(10, 2) CHECK (total_amount >= 0) -- Domain integrity\n);\n\n```\n\n## Database Terms\n\n- **Table**: A collection of related data organized in rows and columns.\n- **Row**: A single instance or entry in a table (also known as a record or tuple).\n- **Column**: A specific characteristic or property of the data in a table (also known as a field or attribute).\n- **Primary Key**: A column or combination of columns that uniquely identifies each row in a table.\n- **Foreign Key**: A column or combination of columns that references the primary key of another table, establishing a relationship between the two tables.\n- **Join**: An operation that combines rows from two or more tables based on a related column.\n- **Index**: A data structure that improves the performance of data retrieval operations by creating a sorted representation of the data in a table.\n- **View**: A virtual table that is dynamically generated from one or more underlying tables.\n- **Stored Procedure**: A pre-compiled collection of SQL statements that can be executed as a single unit.\n- **Trigger**: A special type of stored procedure that is automatically executed when a specific event occurs in a table, such as an INSERT, UPDATE, or DELETE statement.\n\n## Atomic Values\n\nIn database design, it's important to store atomic values, which means storing the smallest pieces of information that cannot be further divided. This principle helps maintain data integrity and avoid redundancy.\n\nFor example, instead of storing a customer's full name in a single column, it's better to separate it into first name and last name columns. This way, you can easily search, sort, or manipulate each part of the name independently.\n\n```sql\n-- Example: Storing atomic values\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100)\n);\n\n```\n\n---\n\n## Introduction to Keys\n\nKeys are essential components in database design that help ensure data integrity and establish relationships between tables. They serve as unique identifiers for records and enable efficient data retrieval and manipulation.\n\n## Primary Key Index\n\nA primary key is a column or a combination of columns that uniquely identifies each record in a table. It ensures that each record is unique and can be easily located. Primary keys are typically indexed to improve query performance.\n\n```sql\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    email VARCHAR(100)\n);\n\n```\n\n## Look up Table\n\nA lookup table, also known as a reference table or a code table, is a table that contains predefined sets of values that can be used to populate columns in other tables. Lookup tables help maintain data integrity by ensuring consistency and reducing redundancy.\n\n```sql\n-- Lookup table for product categories\nCREATE TABLE product_categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(100)\n);\n\n-- Products table referencing the lookup table\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(100),\n    category_id INT,\n    FOREIGN KEY (category_id) REFERENCES product_categories(category_id)\n);\n\n```\n\n## Superkey and Candidate Key\n\nA superkey is a set of one or more columns in a table that uniquely identifies each record. A candidate key is a minimal superkey, meaning it contains no unnecessary columns. In other words, a candidate key is a superkey with the minimal number of columns required to uniquely identify each record.\n\n## Primary Key and Alternate Key\n\nA primary key is a candidate key chosen as the main unique identifier for a table. An alternate key, also known as a unique key, is any other candidate key that could have been chosen as the primary key but was not.\n\n```sql\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    email VARCHAR(100) UNIQUE, -- Alternate key\n    first_name VARCHAR(50),\n    last_name VARCHAR(50)\n);\n```\n\n## Surrogate Key and Natural Key\n\nA surrogate key is an artificial key (often a sequential number or a GUID) that is used as the primary key in a table. It has no inherent meaning or relationship to the data itself. A natural key, on the other hand, is a key derived from the data itself, such as an employee ID or a product code.\n\n```sql\n-- Surrogate key\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY IDENTITY(1,1), -- Surrogate key\n    customer_name VARCHAR(100),\n    order_date DATE\n);\n\n-- Natural key\nCREATE TABLE products (\n    product_code VARCHAR(10) PRIMARY KEY, -- Natural key\n    product_name VARCHAR(100),\n    price DECIMAL(10,2)\n);\n```\n\n## Should I use Surrogate Keys or Natural Keys?\n\nThe choice between surrogate keys and natural keys depends on several factors, including the nature of the data, the likelihood of data changes, and the potential for duplication or conflicts.\n\nSurrogate keys are often preferred because they are:\n\n- Immutable: They do not change over time, even if the data changes.\n- Guaranteed unique: They are generated by the database system, ensuring uniqueness.\n- Opaque: They do not reveal any information about the data itself, which can be beneficial for security and privacy.\n\nNatural keys, on the other hand, can be advantageous when:\n\n- The data has inherent uniqueness, such as product codes or employee IDs.\n- The data is unlikely to change over time, reducing the risk of conflicts or duplication.\n- There is a need for human-readable and meaningful identifiers.\n\n## Foreign Key\n\nA foreign key is a column or a combination of columns in one table that references the primary key of another table. It establishes a link between the two tables and enforces referential integrity, ensuring that data in the child table is valid and consistent with the data in the parent table.\n\n```sql\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n```\n\n## NOT NULL Foreign Key\n\nIn some cases, it might be desirable to have a NOT NULL constraint on a foreign key column, meaning that the column cannot have a null value. This constraint ensures that every record in the child table is associated with a valid record in the parent table.\n\n```sql\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT NOT NULL,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n```\n\n## Foreign Key Constraints\n\nForeign key constraints define the rules for referential integrity between tables. These constraints can include actions to be taken when a referenced record in the parent table is updated or deleted, such as:\n\n- `CASCADE`: When a record in the parent table is updated or deleted, the corresponding records in the child table are also updated or deleted.\n- `SET NULL`: When a record in the parent table is updated or deleted, the corresponding foreign key values in the child table are set to NULL.\n- `NO ACTION`: When a record in the parent table is updated or deleted, the corresponding foreign key values in the child table remain unchanged, and the operation is rolled back if it violates referential integrity.\n\n```sql\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    customer_id INT,\n    order_date DATE,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id) ON UPDATE CASCADE ON DELETE SET NULL\n);\n\n```\n\n## Simple Key, Composite Key, Compound Key\n\n- A simple key is a single column used as a primary key or a foreign key.\n- A composite key is a combination of two or more columns used as a primary key or a foreign key.\n- A compound key is a combination of two or more simple keys used as a foreign key.\n\n```sql\n-- Simple key\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    ...\n);\n\n-- Composite key\nCREATE TABLE order_items (\n    order_id INT,\n    product_id INT,\n    quantity INT,\n    PRIMARY KEY (order_id, product_id)\n);\n\n-- Compound key\nCREATE TABLE shipments (\n    shipment_id INT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    FOREIGN KEY (order_id, product_id) REFERENCES order_items(order_id, product_id)\n);\n\n```\n\n---\n\n## Relationships\n\nRelationships are the cornerstone of relational databases, allowing you to connect and combine data from different tables. There are three main types of relationships:\n\n\n![Relationships Image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qadj6qd495g7yovdcx2d.jpg)\n\n\n## One-to-One Relationships\n\nIn a one-to-one relationship, each record in one table is associated with exactly one record in another table, and vice versa. For example, consider a database where each employee has one and only one manager, and each manager manages one and only one employee. This type of relationship is relatively rare in practice.\n\n![One to One Image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qm0xf8h40rktgqzbp4o4.png)\n\n## One-to-Many Relationships\n\nIn a one-to-many relationship, each record in one table (the \"one\" side) can be associated with multiple records in another table (the \"many\" side). For example, in a database for a school, one teacher can teach multiple classes, but each class is taught by only one teacher.\n\n\n![One to Many Image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qe9iuj8n0n3b1cj24pdf.png)\n\n## Many-to-Many Relationships\n\nIn a many-to-many relationship, each record in one table can be associated with multiple records in another table, and vice versa. For example, in a database for a university, a student can enroll in multiple courses, and each course can have multiple students enrolled.\n\n![Many To many relationship image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r2prop1r97o0cj7cr6qw.jpg)\n\n### Summary of Relationships\n\n- One-to-One: One record in Table A is related to one and only one record in Table B, and vice versa.\n- One-to-Many: One record in Table A can be related to multiple records in Table B, but one record in Table B can be related to only one record in Table A.\n- Many-to-Many: Multiple records in Table A can be related to multiple records in Table B, and vice versa.\n\n## Designing Relationships (SQL Implementation)\n\n**1 - Designing One-to-One Relationships**\n\nTo design a one-to-one relationship, you can either include all the columns from both tables in a single table or create two separate tables and use a foreign key constraint to link them.\n\n```sql\n-- Option 1: Single table\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    manager_first_name VARCHAR(50),\n    manager_last_name VARCHAR(50)\n);\n\n-- Option 2: Two tables with foreign key\nCREATE TABLE employees (\n    employee_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    manager_id INT UNIQUE,\n    FOREIGN KEY (manager_id) REFERENCES employees(employee_id)\n);\n```\n\n2 - **Designing One-to-Many Relationships**\n\nTo design a one-to-many relationship, you typically create two tables: a parent table (the \"one\" side) and a child table (the \"many\" side). The child table includes a foreign key column that references the primary key of the parent table.\n\n```sql\n-- Parent table\nCREATE TABLE teachers (\n    teacher_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50)\n);\n\n-- Child table\nCREATE TABLE classes (\n    class_id INT PRIMARY KEY,\n    class_name VARCHAR(100),\n    teacher_id INT,\n    FOREIGN KEY (teacher_id) REFERENCES teachers(teacher_id)\n);\n```\n\n**3 - Designing Many-to-Many Relationships**\n\nTo design a many-to-many relationship, you typically create a third table (called a junction table or associative table) that links the two main tables together. This junction table includes foreign key columns that reference the primary\n\n```sql\n-- Table 1\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50)\n);\n\n-- Table 2\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100),\n    description TEXT\n);\n\n-- Junction or Intemediary table\nCREATE TABLE enrollments (\n    enrollment_id INT PRIMARY KEY,\n    student_id INT,\n    course_id INT,\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (course_id) REFERENCES courses(course_id)\n);\n```\n\n## Parent Tables and Child Tables\n\nIn a one-to-many or many-to-many relationship, the table on the **\"one\"** side is often referred to as the parent table, while the table on the **\"many\"** side is called the child table. The child table contains a foreign key that references the primary key of the parent table.\n\nFor example, in the teacher-class relationship, the `teachers` table is the parent table, and the `classes` table is the child table. Similarly, in the student-course relationship, the `students` and `courses` tables are parent tables, while the `enrollm`\n\n## Introduction to Entity Relationship Modeling\n\nEntity Relationship Modeling (ER Modeling) is a technique used in database design to represent the logical structure of a database visually. It helps identify the entities (tables), attributes (columns), and relationships between them, making it easier to understand and communicate the database design.\n\nER diagrams consist of the following components:\n\n- **Entities**: Represented by rectangles, entities are the tables or objects in the database.\n- **Attributes**: Listed inside the entity rectangle, attributes are the columns or fields that describe the entity.\n- **Relationships**: Represented by lines connecting entities, relationships depict the associations between entities.\n\n## Cardinality\n\nCardinality defines the numerical relationship between two entities. It specifies the maximum number of instances of one entity that can be associated with a single instance of another entity. The most common cardinalities are:\n\n- One-to-One (1:1): One instance of Entity A can be associated with at most one instance of Entity B, and vice versa.\n- One-to-Many (1:N): One instance of Entity A can be associated with multiple instances of Entity B, but one instance of Entity B can be associated with only one instance of Entity A.\n- Many-to-Many (M:N): Multiple instances of Entity A can be associated with multiple instances of Entity B, and vice versa.\n\nIn ER diagrams, cardinality is represented using specific notation, such as a single line for one-to-one, a line with an arrowhead for one-to-many, and a line with arrowheads at both ends for many-to-many relationships.\n\n![Cardinality Image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmife5ost450cgntriyi.png)\n\n\n## Modality\n\nModality refers to whether the existence of an entity instance depends on its relationship with another entity. There are two types of modality:\n\n- Partial modality: The existence of an instance does not depend on its relationship with another entity. For example, a customer can exist without having any orders.\n- Total modality: The existence of an instance depends on its relationship with another entity. For example, an order item cannot exist without an order.\n\nIn ER diagrams, modality is represented using specific notation, such as a single bar for partial modality and a double bar for total modality.\n\n--- \n\n## Introduction to Database Normalization\n\nDatabase normalization is the process of organizing data in a database to reduce redundancy, minimize data anomalies (insertion, update, and deletion anomalies), and improve data integrity. It involves breaking down a database into smaller tables and defining relationships between them based on specific rules or normal forms.\n\nThe primary goals of database normalization are:\n\n- Eliminating redundant data\n- Ensuring data integrity\n- Facilitating data manipulation and maintenance\n\nThere are several normal forms in database normalization, each building upon the previous one. The most commonly used normal forms are:\n\n1. First Normal Form (1NF)\n2. Second Normal Form (2NF)\n3. Third Normal Form (3NF)\n\n## 1NF (First Normal Form of Database Normalization)\n\nThe First Normal Form (1NF) is the most basic form of normalization. It states that an attribute (column) in a table must have atomic values, meaning each cell in the table should contain a single value, not a set of values.\n\nFor example, consider a table with a column named \"PhoneNumbers\" that stores multiple phone numbers for a customer. This violates 1NF because the column contains a set of values instead of a single value. To conform to 1NF, you would need to separate the phone numbers into individual columns or create a separate table for phone numbers.\n\n```sql\n-- Violates 1NF\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    name VARCHAR(100),\n    phone_numbers VARCHAR(200) -- Stores multiple phone numbers, violating 1NF\n);\n\n-- Conforms to 1NF\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    name VARCHAR(100),\n    phone1 VARCHAR(20),\n    phone2 VARCHAR(20),\n    phone3 VARCHAR(20)\n);\n```\n\n## 2NF (Second Normal Form of Database Normalization)\n\nThe Second Normal Form (2NF) builds upon 1NF by addressing the issue of partial dependencies. A table is in 2NF if it is in 1NF and every non-prime attribute (column) is fully dependent on the entire primary key.\n\nIn other words, if a table has a composite primary key (consisting of multiple columns), then all non-key columns must depend on the entire primary key, not just a part of it.\n\nFor example, consider a table with a composite primary key of `(student_id, course_id)` and a column `grade`. If the `grade` column depends only on the `course_id` and not on the combination of `student_id` and `course_id`, then the table violates 2NF.\n\n```sql\n-- Violates 2NF\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    course_name VARCHAR(100), -- Depends only on course_id, not the entire primary key\n    grade CHAR(2), \n    PRIMARY KEY (student_id, course_id)\n);\n\n-- Conforms to 2NF\nCREATE TABLE student_courses (\n    student_id INT,\n    course_id INT,\n    grade CHAR(2),\n    PRIMARY KEY (student_id, course_id)\n);\n\nCREATE TABLE courses (\n    course_id INT PRIMARY KEY,\n    course_name VARCHAR(100)\n);\n```\n\n## 3NF (Third Normal Form of Database Normalization)\n\nThe Third Normal Form (3NF) builds upon 2NF by addressing the issue of transitive dependencies. A table is in 3NF if it is in 2NF and every non-prime attribute is non-transitively dependent on the primary key.\n\nIn other words, if a non-key column is dependent on another non-key column, then the table violates 3NF, and the non-key columns should be separated into their own table.\n\nFor example, consider a table with columns `student_id`, `student_name`, `class_id`, and `class_name`. The `student_name` column depends on the `student_id`, and the `class_name` column depends on the `class_id`. However, the `class_name` column also transitively depends on the `student_id` through the `class_id` column. This violates 3NF.\n\n```sql\n-- Violates 3NF\nCREATE TABLE student_classes (\n    student_id INT,\n    student_name VARCHAR(100),\n    class_id INT,\n    class_name VARCHAR(100),\n    PRIMARY KEY (student_id, class_id)\n);\n\n-- Conforms to 3NF\nCREATE TABLE students (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(100)\n);\n\nCREATE TABLE classes (\n    class_id INT PRIMARY KEY,\n    class_name VARCHAR(100)\n);\n\nCREATE TABLE student_classes (\n    student_id INT,\n    class_id INT,\n    PRIMARY KEY (student_id, class_id),\n    FOREIGN KEY (student_id) REFERENCES students(student_id),\n    FOREIGN KEY (class_id) REFERENCES classes(class_id)\n);\n```\n\nBy following the principles of database normalization, you can create well-structured and efficient databases that minimize redundancy, maintain data integrity, and facilitate data manipulation and maintenance.\n\n---\n\n## Indexes (Clustered, Nonclustered, Composite Index)\n\nIndexes are data structures that improve the performance of data retrieval operations in a database. They create a sorted representation of the data in a table, allowing for faster searches and queries. There are several types of indexes:\n\n- **Clustered Index**: A clustered index physically reorders the rows in a table based on the index key values. Each table can have only one clustered index.\n- **Nonclustered Index**: A nonclustered index is a separate object that contains the index key values and pointers to the corresponding rows in the table. A table can have multiple nonclustered indexes.\n- **Composite Index**: A composite index is an index that includes multiple columns in the index key. It can be either clustered or nonclustered.\n\n```sql\n-- Clustered index\nCREATE CLUSTERED INDEX idx_customers_name\nON customers (last_name, first_name);\n\n-- Nonclustered index\nCREATE NONCLUSTERED INDEX idx_orders_date\nON orders (order_date);\n\n-- Composite index\nCREATE INDEX idx_products_category_price\nON products (category_id, price);\n```\n\n## Data Types\n\nIn the world of databases, data types are like different shapes of containers that hold specific types of information. Just as you wouldn't store liquids in a basket or solid objects in a jar, databases need to enforce specific data types to ensure data integrity and consistency.\n\nSome common data types in SQL include:\n\n- `INT` or `INTEGER`: Stores whole numbers, like `42` or `17`.\n- `FLOAT` or `DOUBLE`: Stores decimal numbers, like `3.14159` or `0.00005`.\n- `VARCHAR` or `TEXT`: Stores text data, like names or descriptions.\n- `DATE` or `DATETIME`: Stores date and time values, like `'2023-05-06'` or `'2024-01-01 12:34:56'`.\n- `BOOLEAN`: Stores true/false values, like `1` (true) or `0` (false).\n\nChoosing the right data type is crucial because it affects how the data is stored, queried, and manipulated. For example, trying to store a large string in an `INT` column would result in an error or data truncation.\n\n```sql\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL,\n    age INT,\n    is_active BOOLEAN DEFAULT 1\n);\n\n```\n\nIn this example, we create a `users` table with columns for `id` (integer), `name` (string of up to 50 characters), `age` (integer), and `is_active` (boolean, with a default value of `1` or true).\n\n\n---\n\n## Introduction to Joins\n\nJoins are like bridges that connect different tables in a database, allowing you to combine and retrieve related data from multiple sources. They are a fundamental concept in relational databases and are essential for querying and manipulating data efficiently.\n\n\n![Joins Image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iks7pvzjikxzgqicjh2x.png)\n\n## Inner Join\n\nAn inner join is like a friendly handshake between two tables, where only the rows that have matching values in both tables are included in the result set. It's a way to combine data from multiple tables based on a common column or set of columns.\n\n```sql\nSELECT users.name, orders.order_date\nFROM users\nINNER JOIN orders ON users.id = orders.user_id;\n```\n\nIn this example, we retrieve the `name` column from the `users` table and the `order_date` column from the `orders` table, but only for rows where the `id` in the `users` table matches the `user_id` in the `orders` table.\n\n## Inner Join on 3 Tables (Example)\n\nLet's say we have three tables: `users`, `orders`, and `products`. We want to retrieve the user's name, the order date, and the product name for each order. We can achieve this by performing an inner join across all three tables:\n\n```sql\nSELECT users.name, orders.order_date, products.product_name\nFROM users\nINNER JOIN orders ON users.id = orders.user_id\nINNER JOIN products ON orders.product_id = products.id;\n```\n\nHere, we first join the `users` and `orders` tables on the `id` and `user_id` columns. Then, we join the result of that join with the `products` table on the `product_id` and `id` columns. This way, we can retrieve data from all three tables in a single query, but only for rows where the join conditions are met.\n\n## Introduction to Outer Joins\n\nWhile inner joins are like friendly handshakes, outer joins are more like welcoming hugs. They include not only the matching rows from both tables but also the non-matching rows from one or both tables, depending on the type of outer join.\n\n## Right Outer Join\n\nA right outer join is like a warm hug from the right table to the left table. It includes all rows from the right table, along with the matching rows from the left table. If there are no matching rows in the left table, the result will contain `NULL` values for the left table's columns.\n\n```sql\nSELECT users.name, orders.order_date\nFROM users\nRIGHT OUTER JOIN orders ON users.id = orders.user_id;\n```\n\nIn this example, we retrieve all rows from the `orders` table (the right table), along with the matching `name` values from the `users` table (the left table). If an order doesn't have a matching user, the `name` column will contain `NULL`.\n\n## JOIN with NOT NULL Columns\n\nSometimes, you may want to perform a join only on columns that are not null. This can be useful when you want to exclude rows with missing data from the result set.\n\n```sql\nSELECT users.name, orders.order_date\nFROM users\nINNER JOIN orders ON users.id = orders.user_id AND users.name IS NOT NULL;\n\n```\n\nIn this example, we perform an inner join between the `users` and `orders` tables, but we add an additional condition `users.name IS NOT NULL` to ensure that only rows with non-null `name` values are included in the result set.\n\n## Outer Join Across 3 Tables\n\nSimilar to the inner join example, we can perform outer joins across multiple tables. Let's say we want to retrieve all orders, along with the user's name and the product name, even if there are missing values in the `users` or `products` tables.\n\n```sql\nSELECT users.name, orders.order_date, products.product_name\nFROM orders\nLEFT OUTER JOIN users ON orders.user_id = users.id\nLEFT OUTER JOIN products ON orders.product_id = products.id;\n\n```\n\nHere, we start with the `orders` table and perform a left outer join with both the `users` and `products` tables. This ensures that all orders are included in the result set, along with the matching user names and product names if available. If there are no matching rows in the `users` or `products` tables, the respective columns will contain `NULL` values.\n\n## Alias\n\nAliases are like nicknames for tables or columns in SQL queries. They can make queries more readable and easier to understand, especially when dealing with long table or column names, or when referencing the same table multiple times in a query.\n\n```sql\nSELECT u.name, o.order_date, p.product_name\nFROM users u\nINNER JOIN orders o ON u.id = o.user_id\nINNER JOIN products p ON o.product_id = p.id;\n\n```\n\nIn this example, we use the aliases `u` for the `users` table, `o` for the `orders` table, and `p` for the `products` table. This makes the query more concise and easier to read, without having to repeat the full table names multiple times.\n\n## Self Join\n\nA self join is like a table having a conversation with itself. It's a way to join a table with itself, based on a specific condition or relationship within the same table. This can be useful when dealing with hierarchical or recursive data structures, such as employee-manager relationships or nested categories.\n\n```sql\nSELECT e.name AS employee, m.name AS manager\nFROM employees e\nLEFT OUTER JOIN employees m ON e.manager_id = m.id;\n```\n\nIn this example, we perform a self join on the `employees` table to retrieve the name of each employee and their corresponding manager's name. We use a left outer join to ensure that all employees are included in the result set, even if they don't have a manager assigned.\n\n---\n\n## Database Markup Language (DBML)\n\nDatabase Modeling Language (DBML) is a simple and intuitive markup language for describing the structure of relational databases. It provides a human-readable way to define tables, columns, relationships, and constraints, making it easy to communicate and collaborate on database designs.\n\n**Getting Started with DBML**\n\nTo get started with DBML, you'll need a text editor and a basic understanding of database concepts. Let's create our first DBML file:\n\n```sql\n// my_database.dbml\n\nTable users {\n  id int [pk, increment]\n  username varchar\n  email varchar [unique]\n  created_at datetime [default: `now()`]\n}\n\n```\n\nIn this example, we've defined a `users` table with columns for `id`, `username`, `email`, and `created_at`. The `[pk]` tag specifies that `id` is the primary key, `[increment]` indicates auto-incrementing, `[unique]` ensures uniqueness for the `email`, and `[default:` now()`]` sets the default value of `created_at` to the current timestamp.\n\n**Creating Tables**\n\nDBML allows you to define multiple tables and their columns in a single file. Let's add more tables to our database:\n\n```sql\n// my_database.dbml\n\nTable users {\n  id int [pk, increment]\n  username varchar\n  email varchar [unique]\n  created_at datetime [default: `now()`]\n}\n\nTable posts {\n  id int [pk, increment]\n  title varchar\n  content text\n  user_id int [ref: > users.id]\n  created_at datetime [default: `now()`]\n}\n\n```\n\nIn this example, we've added a `posts` table with columns for `id`, `title`, `content`, `user_id`, and `created_at`. The `[ref: > users.id]` tag establishes a foreign key relationship between the `user_id` column in the `posts` table and the `id` column in the `users` table.\n\n**Defining Relationships**\n\nDBML supports various types of relationships between tables, including one-to-one, one-to-many, and many-to-many. Let's define some relationships in our database:\n\n```sql\n// my_database.dbml\n\nTable users {\n  id int [pk, increment]\n  username varchar\n  email varchar [unique]\n  created_at datetime [default: `now()`]\n}\n\nTable posts {\n  id int [pk, increment]\n  title varchar\n  content text\n  user_id int [ref: > users.id]\n  created_at datetime [default: `now()`]\n}\n\nRef: users.id \u003C posts.user_id\n\n```\n\nIn this example, we've defined a one-to-many relationship between the `users` and `posts` tables. The `Ref: users.id \u003C posts.user_id` line specifies that the `id` column in the `users` table is referenced by the `user_id` column in the `posts` table.\n\n**Adding Constraints**\n\nConstraints ensure data integrity and enforce rules on the database. DBML supports various constraints such as primary keys, foreign keys, unique constraints, and default values. Let's add some constraints to our tables:\n\n```sql\n// my_database.dbml\n\nTable users {\n  id int [pk, increment]\n  username varchar [unique]\n  email varchar [unique]\n  created_at datetime [default: `now()`]\n}\n\nTable posts {\n  id int [pk, increment]\n  title varchar\n  content text\n  user_id int [ref: > users.id]\n  created_at datetime [default: `now()`]\n}\n\nRef: users.id \u003C posts.user_id\n\n```\n\nIn this updated example, we've added a `[unique]` constraint to the `username` column in the `users` table to ensure that each username is unique.\n\n**Documenting Your Database**\n\nDBML allows you to add comments and annotations to your database schema, making it easier to understand and maintain. Let's document our tables with comments:\n\n```sql\n// my_database.dbml\n\nTable users {\n  id int [pk, increment] // Unique identifier for users\n  username varchar [unique] // User's username\n  email varchar [unique] // User's email address\n  created_at datetime [default: `now()`] // Date and time when the user was created\n}\n\nTable posts {\n  id int [pk, increment] // Unique identifier for posts\n  title varchar // Title of the post\n  content text // Content of the post\n  user_id int [ref: > users.id] // ID of the user who created the post\n  created_at datetime [default: `now()`] // Date and time when the post was created\n}\n\nRef: users.id \u003C posts.user_id // Relationship between users and posts\n\n```\n\n**Benefits of DBML**\n\n- Simple and human-readable syntax\n- Database-agnostic approach\n- Free visualization tool at [dbdiagram.io](dbdiagram.io)\n- Consistent conventions for readability and maintainability\n- Extensive documentation and examples\n\n---\n\n## Conclusion \n\nIn wrapping up, relational database design forms the backbone of efficient data organization in modern applications. Understanding its principles empowers you to create robust and scalable databases. Next up, we'll delve into SQL syntax, unlocking the power to interact with databases effectively. Stay tuned for our exploration into the world of SQL!","src/data/blog/database-design.mdx","68cb8e29e4addfe2","lms-system",{"id":40,"data":42,"body":49,"filePath":50,"digest":51,"deferredRender":28},{"pubDatetime":43,"series":15,"image":44,"title":45,"draft":18,"tags":46,"category":20,"description":48},["Date","2024-04-11T00:00:00.000Z"],"/og-images/articles/lms.jpg","Let's Build a Learning Management System (LMS) | Hands-on Learning Approach",[47,21,22,23],"programming","Rethinking my backend engineering learning approach—shifting from theory-focused to a more hands-on, practical journey toward senior-level expertise.","![Cover Image](/og-images/articles/lms.jpg)\n\n## Introduction\n\nIt's been a while since I kick-started my backend engineering journey, and the plan was simply to take each major concept in the backend landscape and **learn it** then **learn one or two of its application** like for example, learning about databases then learning **PostreSQL** & **Mongodb**, for more details checkout this blog article I wrote, which talks about this point in great details:\n\nbut essentially after a while, I realized that it's not the most optimum way to make it to the other side where senior backend engineers are! So let's discuss together **why** I'll switch to a more practical and hands-on learning approach and **how** I'll do it...\n\n---\n\n## Limitation Of Previous Theoretical Learning Approach\n\n**First** of all, backend engineering is simply building things! of course you need to learn the necessary tools and building blocks (web servers, protocols, proxies, ....) so you can build something with them in the first place! but for someone who already has put a foot in the software engineering world, its easier, funnier and more practical to learn by building projects rather than learning pure concepts that you already have at least a basic idea with, and can be further understood by utilizing them in a project you're building.\n\n![Image that shows the wrong way of learning](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ojymltlle56xevj01mq.png)\n\n**Second**, in the realm of backend, some things aren't just learnable by taking courses or reading articles and documentation, things like architectural concepts like micro-services, webhooks or operational skills like CI/CD and project maintenance and a lot more, one of you may argue that there is plenty of courses, docs and articles that teaches those things in details, but for me such concepts are better learned by doing then use their learning resources as references, just like you do with cooking recipes you don't study the recipe a head of time then cook it later!, the same can be said about a lot of backend engineering knowledge:\n\n> Better learned by doing rather than reading\n\n![Learn by doing not reading gif](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w21asp1l0trwb153lbe9.gif)\n\n**Finally** and most important for me is me realizing that learning backend concepts piece by piece won't take you far, and that because those concepts are glued together in away that makes learning them separately doesn't make to much sense in the real world.\n\n\n![Web Technologies are realated to each other](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4t5xuor3kr03xo77pgvw.png)\n\n\n---\n\n## The Project We'll Build and It's Requirements\n\nChoosing the right project to work on wasn't easy. I wanted something that's packed with features so I can utilize lots of different technologies and learn as much as possible. But most importantly, it had to be something I'm really passionate about and could work on for a long time. \n\nMy choices varied between:\n\n- E-Commerce backend system\n- Social Media backend system\n- Blogging website backend system\n- E-Learning platform or a Learning management system (LMS)\n\nAfter weighing my options, I've decided to build a **Learning Management System (LMS)**. \n\nAn LMS is a great project that will gimme room to implement a lot of core backend concepts: beside the obvious ones: Framework, Database, Authentication I can also implement a lot of other cool things like: splitting it into separate micro-services, implementing a messaging queue so the system is more robust and less coupled and a lot of other technical requirements.\n\nThe requirement of the (LMS) I wanna build are as follows:\n\n### 1. User Roles\n**1.1 Teacher**\n- Can create, manage, and publish courses.\n- Has access to a dashboard for course management and analytics.\n\n**1.2 Student**\n- Can enroll in courses, view course content, and track progress.\n- Has access to a dashboard for viewing enrolled courses and progress.\n\n### 2. Core Features\n**2.1 Course Management**\n- Teachers can create and manage courses, including adding modules, lessons, quizzes, and assignments.\n- Course content can include text, images, videos, presentations, and other multimedia elements.\n- Teachers can set prerequisites, deadlines, and grading criteria for courses.\n\n**2.2 Student Enrollment**\n- Students can browse the course marketplace and enroll in courses.\n- Enrollment process includes payment integration for paid courses.\n- Students receive notifications and updates on enrolled courses.\n\n**2.3 Dashboards**\n- Teacher Dashboard:\n  - Overview of course analytics, including enrollment, completion rates, and student performance.\n  - Tools for managing course content, assignments, and communication with students.\n- Student Dashboard:\n  - List of enrolled courses with progress tracking.\n  - Access to course materials, assignments, and grades.\n\n**2.4 Communication**\n- Integrated messaging system for communication between teachers and students.\n- Discussion forums for course-specific discussions and peer interaction.\n- Announcements and notifications for important updates and deadlines.\n\n**2.5 Assessment and Grading**\n- Support for various assessment formats, including quizzes, assignments, and exams.\n- Automatic grading for objective assessments and manual grading for subjective assessments.\n- Gradebook for teachers to track student performance and provide feedback.\n\n**2.6 Course Marketplace**\n- Platform for course creators to publish and sell their courses.\n- Course discovery features, including search, filters, and recommendations.\n- Revenue sharing model for course creators and platform fees for transactions.\n\n### 3. Technical Requirements\n**3.1 Frontend**\nwhich is the thing that it is not my priority for now, I'll focus on implementing a big part if not all the backend logic before I think of the front end\n\n**3.2 Backend**\n- Scalable and secure backend infrastructure hosted on cloud service.\n- RESTful, gRPC, websockets, GraphQL APIs (maybe only restfull, maybe two of them maybe all I'm not sure yet) for communication between frontend and backend components.\n- Micro-services architecture where each part of the bakcend system will have each own containerized independent service\n- Integration with third party services (payment gateways and storage buckets, ...)\n\n**3.3 Database**\n- Relational database management system is must for such big system with tones of related entities.\n- May NoSQL database for storing more instructed data like courses content and chapters......\n- An in-memory data base for caching purposes.\n\n### 4. Security and Compliance\n**4.1 User Authentication**\n- Secure authentication and authorization mechanisms for user accounts.\n- Support for OAuth2 providers like google, github....\n\n**4.2 Data Protection**\n- Encryption of sensitive data in transit and at rest.\n- Compliance with data protection regulations (e.g., GDPR, CCPA).\n\n**4.3 Access Control**\n- Role-based access control (RBAC) to restrict access to sensitive features and functionalities.\n- Granular permissions management for admins, teachers, and students.\n\n---\n\n## The Chosen Tech-stack and Why\n\nWell well well, the choice of the tech stack will be highly subjective and constrained to the following 3 points:\n\n1. **Keep away from what I already know**: where I'll try to get out of my comfort zone and use technologies that I'm not already familiar with (at the end of the day a lot of standardized technologies I'm not familiar with cuz I'm still kinda of a beginner)\n\n2. **Technology spread and popularity**: This one is pretty straightforward, since I'm new and yet learning no need to choose some fancy rust based backend framework that only few hundred people know how to use on the world!\n\n3. **What I personally see sexy and hot**: Cuz most of the time there is multiple choices that are very popular, and I'm not familiar with but I choose one over the other for no reason but cuz it sounds sexier!\n\ntherefor here is my tech-stack for this project:\n\n**Backend Framework:**\n- **NestJS**: Main backend framework, providing a modular and scalable architecture for building server-side applications with TypeScript.\n\n**Database:**\n- **PostgreSQL**: Main relational database management system (RDBMS) used for storing and managing structured data in the project.\n\n**Programming Language:**\n- **TypeScript**: Language of choice enforced by NestJS, offering strong typing and modern features for enhanced developer productivity and code maintainability.\n\n**Message Broker:**\n- **RabbitMQ**: Messaging broker utilized for asynchronous communication and event-driven architecture, facilitating scalable and decoupled backend services.\n\n**Cloud Hosting Provider:**\n- **AWS (Amazon Web Services)**: Cloud infrastructure platform used for hosting, deploying, and scaling the project's backend services and resources.\n\n**Payment Integration:**\n- **Stripe**: Payment processing platform integrated into the project for handling online payments securely and efficiently.\n\n**Object Storage:**\n- **Amazon S3 (Simple Storage Service)**: Scalable cloud storage solution employed for storing and retrieving large files and media assets in the project.\n\n**Caching:**\n- **Redis**: In-memory data store utilized for caching frequently accessed data and improving the performance and responsiveness of the application.\n\n**Containerization:**\n- **Docker**: Containerization platform employed for packaging the project's applications and dependencies into lightweight and portable containers.\n\n**Container Orchestration:**\n- **Kubernetes (K8s)**: Container orchestration tool utilized for automating deployment, scaling, and management of containerized applications in a clustered environment.\n\n**And Who Knows What Else...**\n\n---\n\n## Conclusion\n\nWhat I truly like about this new approach is that there is a lot of skills that I'll be forced to learn, things like Database Design, Operational skills like CI/CD and a lot more. And Concerning Java and DSA nothing changed, my DSA journey is still running and the next blog post will be either **DSA Part 1** or **Relational Database Design**, so stay tuned and see yaaaaaaaaaaaaaaaaaaa","src/data/blog/lms-system.mdx","b8bc73844a4fd7da","backend-essenials",{"id":52,"data":54,"body":60,"filePath":61,"digest":62,"deferredRender":28},{"pubDatetime":55,"series":15,"image":56,"title":57,"draft":18,"tags":58,"category":20,"description":59},["Date","2024-04-11T00:00:00.000Z"],"/og-images/articles/backend-essenials.jpg","Unveiling the Backbone Dive Deep into Backend Engineering Essentials!",[20,21,22,23],"A deep dive into backend engineering beyond frameworks, focusing on core concepts like communication protocols, databases, security, and scalability.","![Cover Image](/og-images/articles/backend-essenials.jpg)\n\n## Introduction \n\nEven after diving into building basic backend CRUD apps and moving beyond the initial thrill, I still find myself baffled by terms like \"Distributed systems.\" Despite my efforts with Googling and tutorials, concepts like the importance of tools such as Kafka or RabbitMQ, understanding Microservices, and why gRPC is prevalent in this architecture continue to elude me. There's a lot to unpack, and it leaves me scratching my head.\n\n```python\n# complete BS!\nbackend_development == the_framework\n```\n\n---\n\n## My previous idea about backend engineering\n\nI don't blame myself, or the many other new developers navigating the backend landscape, for our shallow understanding of the subject. The reality is, if you search for \"Learn Backend Development/Engineering\" on major learning platforms like YouTube, Coursera, or Udemy, you'll likely find that 90% of the results are titled something like:\n\n- \"Learn Backend Development with Django\"\n- \"Master Node.js Backend Development\"\n- \"The Spring Boot Backend Development Full Course\"\n\nIt's no wonder many of us struggle to grasp the broader concepts when the focus is often on specific frameworks or technologies. But isn't backend development more than just mastering a programming language or framework? Don't get me wrong though, there is some awesome people in the community who deeply explore the subject. Later on, I'll mention some of them who have really helped me gain a better understanding of things around me thus far.\n\n---\n\n## My new understanding of backend engineering\n\nIn my exploration of backend engineering, I'm delving into crucial components that drive complex backend infrastructure. We'll delve into topics such as how data flows between clients and servers, storing information in databases securely, and maintaining overall system safety. Additionally, we'll explore tools designed to enhance performance and streamline development processes.\nThe following list of essential backend concepts that i will be exploring, learning, and implementing in my journey:\n\n- **Communication Protocols**: \n  Facilitate data exchange between client and server (e.g., HTTP for web browsing, WebSocket for real-time communication).\n\n- **Web Servers**: \n  Handle client requests, serve web content, and execute server-side logic to generate dynamic web pages.\n\n- **Databases**: \n  Store and retrieve data, with relational databases using structured tables and non-relational databases offering flexible data models.\n\n- **Proxies**: \n  Act as intermediaries between clients and servers, improving security, performance, and scalability by playing various roles from caching to load balancing to others.\n\n- **Caching**: \n  Enhance performance and reduce server load by storing frequently accessed data in temporary storage for quick retrieval.\n\n- **Message Queues**: \n  Enable asynchronous communication between distributed components, allowing systems to process tasks independently and efficiently.\n\n- **Web Frameworks**: \n  Simplify backend development by providing pre-built components and structures to streamline the creation of web applications.\n\n- **Security**: \n  Ensure the protection of backend systems from threats through encryption, firewalls, and authentication mechanisms and security protocols.\n\n--- \n\n![Core backend engineering concepts](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d8t76cay50onx4n1ft91.gif)\n\n---\n\n## Foundations matter\n> Prioritize Concepts Over Frameworks and Languages, they are just tools at the end!\n\nOne of the most valuable lessons I've learned so far is to never rely on any specific framework or programming language. Instead, I aim to be what I like to call a \"Framework/Language-agnostic engineer.\" This means having a solid foundation in the underlying and universal concepts of backend or computer science in general, which can be easily applied in any language or framework.\n\nFor instance, understanding concepts like concurrency and asynchronous I/O in pure computer science terms before diving into specific implementations like Python's \"asyncio\" library or JavaScript promises is crucial. Similarly, grasping the idea of web APIs, whether they're RESTful, gRPC, or GraphQL, and then learning an implementation like Express or Django Rest Framework is essential.\n\nToo often, aspiring backend developers take the reverse path, confining themselves to a specific technology and getting locked into a shallow, syntax-level understanding of the subject. This can leave them struggling to build complex apps or debug simple ones when serious problems arise. Even worse, they may become entrenched in one implementation or design philosophy in an ever-changing field like backend engineering, where yesterday's new technologies are today's old ones. The only constant is the concept behind them.\n\nThis principle has contributed significantly to where I am today. A few months ago, I applied for a frontend position at the company I work for now. At the time, they didn't really need frontend developers. However, I ended up getting a backend developer position despite having very limited experience in backend and not even with the tech stack they use. This was mainly because I showed the interviewer that for me:\n> Technologies are just tools that come and go, and what really matters is the ideas and concepts behind them.\n\n---\n\n## Resources That helped me a lot\n\n- [**Roadmap.sh**](https://roadmap.sh/backend): This website is like a treasure map for backend development! It lays out a clear path with lots of helpful resources to guide you along the way.\n\n\n- [**Hussein Nasser**](https://www.youtube.com/@hnasr): Oh, this guy is awesome! Hussein Nasser talks about all things backend in a way that's easy to understand. He's not just about coding; he dives deep into why things work the way they do and gives real-life examples.\n[Hussein Nasser YouTube Channel]\n\n\n- [**Amigos Code**](https://www.youtube.com/@amigoscode): If you're into Java and Spring framework, you'll love Amigos Code. They break down backend development into simple steps and give practical advice without any fancy promises. It's like chatting with a friend who knows a lot about coding!\n\n## Conclusion\n\nAs we wrap up our exploration of key backend engineering concepts, it's clear that there's still much more to learn. From communication protocols to security measures, each concept we've discussed offers a glimpse into the complexity of backend development.\n\nIn our future blogs, we'll dive deeper into these topics, exploring them in greater detail and building practical projects to deepen our understanding. Join me on this journey as we continue to uncover the secrets of backend engineering and work towards building robust, efficient, and secure web applications together. Stay tuned for more exciting discoveries ahead!","src/data/blog/backend-essenials.mdx","eb6524ac89a6a673","sql-guide",{"id":63,"data":65,"body":73,"filePath":74,"digest":75,"deferredRender":28},{"pubDatetime":66,"series":15,"image":67,"title":68,"draft":18,"tags":69,"category":20,"description":72},["Date","2024-05-08T00:00:00.000Z"],"/og-images/articles/sql.jpg","Mastering SQL | Comprehensive Guide To Structured Query Language",[20,21,70,71],"sql","database","A high-level introduction to SQL, exploring its syntax and core features for bringing database designs to life.","![Cover Image](/og-images/articles/sql.jpg)\n\n## Introduction\n\nIn the previous blog article we've explored together a comprehensive guide on:\nan in this article, we will discover in a high level the syntax and core features of the language that is actually used to bring the database schema design to existence... SQL.\n\nSo... Let's dive right into it!\n\n![Let's dive in image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvmr1vh4frdyjfmzf5sh.gif)\n\n---\n\n## What is SQL\n\nSQL, or Structured Query Language, is the facade language used to talk to all **RDMSs**, however for the most time as backend engineers (we're not database engineers) we don't use SQL directly, and we rather use Object Relational Mappers **ORMs** which provides a better more reliable interface on top of raw SQL to communicate with database in our preferred programming language, however we still need a basic knowledge of SQL for quick and simple  manipulation and interactions with the database.\n\n\n\n![What if i told you meme](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvpr0nujx4fed7e4xvh3.png)\n\n---\n\n## Basic SQL Queries\n\nBasic SQL queries involve selecting specific data from a database table using commands like SELECT, DISTINCT, WHERE, LIMIT, and OFFSET.\n\n```sql\n-- Selecting all columns from a table\nSELECT * FROM employees;\n\n-- Selecting specific columns\nSELECT first_name, last_name FROM employees;\n\n-- Using DISTINCT to get unique values\nSELECT DISTINCT department_id FROM employees;\n\n-- Using WHERE to filter results\nSELECT * FROM employees WHERE department_id = 10;\n\n-- Using LIMIT to limit the number of results\nSELECT * FROM employees LIMIT 5;\n\n-- Using OFFSET to skip certain rows\nSELECT * FROM employees OFFSET 5;\n```\n\n---\n\n## Filtering Data\n\nFiltering data in SQL allows you to retrieve specific records from a table based on certain conditions, such as using comparison operators like > | \u003C | = and logical operators like AND, OR, and NOT.\n\n```sql\n-- Using comparison operators\nSELECT * FROM employees WHERE salary > 50000;\n\n-- Using logical operators\nSELECT * FROM employees WHERE department_id = 10 AND salary > 50000;\n\n-- Using IN and NOT IN\nSELECT * FROM employees WHERE department_id IN (10, 20);\n\n-- Using BETWEEN\nSELECT * FROM employees WHERE salary BETWEEN 40000 AND 60000;\n\n-- Using LIKE for pattern matching\nSELECT * FROM employees WHERE last_name LIKE 'S%';\n```\n\n---\n\n## Sorting Data\n\nSorting data in SQL arranges the retrieved records in either ascending or descending order based on specified columns using the ORDER BY clause.\n\n```sql\n-- Sorting data in ascending order\nSELECT * FROM employees ORDER BY salary;\n\n-- Sorting data in descending order\nSELECT * FROM employees ORDER BY salary DESC;\n\n-- Sorting by multiple columns\nSELECT * FROM employees ORDER BY department_id, salary DESC;\n```\n\n---\n\n## Aggregate Functions\n\nAggregate functions in SQL perform calculations on a set of values and return a single value. Common aggregate functions include COUNT, SUM, AVG, MIN, and MAX.\n\n```sql\n-- Counting the number of rows\nSELECT COUNT(*) FROM employees;\n\n-- Calculating total salary\nSELECT SUM(salary) FROM employees;\n\n-- Finding average salary\nSELECT AVG(salary) FROM employees;\n\n-- Finding minimum salary\nSELECT MIN(salary) FROM employees;\n\n-- Finding maximum salary\nSELECT MAX(salary) FROM employees;\n```\n\n---\n\n## Grouping Data\n\nGrouping data in SQL allows you to group rows that have the same values in specified columns using the GROUP BY clause, often used in conjunction with aggregate functions.\n\n```sql\n-- Grouping data by department\nSELECT department_id, COUNT(*) FROM employees GROUP BY department_id;\n\n-- Using HAVING to filter grouped data\nSELECT department_id, COUNT(*) FROM employees GROUP BY department_id HAVING COUNT(*) > 5;\n```\n\n---\n\n## Joins\n\nJoins in SQL combine data from multiple tables based on related columns to retrieve data that spans across those tables.\n\n```sql\n-- Inner Join\nSELECT * FROM employees INNER JOIN departments ON employees.department_id = departments.department_id;\n\n-- Left Join\nSELECT * FROM employees LEFT JOIN departments ON employees.department_id = departments.department_id;\n\n-- Right Join\nSELECT * FROM employees RIGHT JOIN departments ON employees.department_id = departments.department_id;\n\n-- Full Outer Join\nSELECT * FROM employees FULL OUTER JOIN departments ON employees.department_id = departments.department_id;\n```\n\n---\n\n## Subqueries\n\nSubqueries in SQL are nested queries within another query, used to retrieve data that depends on the result of another query.\n\n```sql\n-- Subquery example\nSELECT * FROM employees WHERE department_id IN (SELECT department_id FROM departments WHERE location_id = 1700);\n\n-- Correlated subquery example\nSELECT * FROM employees e WHERE salary > (SELECT AVG(salary) FROM employees WHERE department_id = e.department_id);\n```\n\n---\n\n## Views\n\nViews in SQL are virtual tables generated from the result of a query, providing a way to simplify complex queries and restrict access to certain data.\n\n```sql\n-- Creating a view\nCREATE VIEW high_paid_employees AS SELECT * FROM employees WHERE salary > 80000;\n\n-- Updating a view\nCREATE OR REPLACE VIEW high_paid_employees AS SELECT * FROM employees WHERE salary > 90000;\n\n-- Dropping a view\nDROP VIEW IF EXISTS high_paid_employees;\n```\n\n---\n\n## Indexing\n\nIndexing in SQL improves the performance of queries by creating indexes on columns, allowing for faster data retrieval.\n\n```sql\n-- Creating an index\nCREATE INDEX idx_lastname ON employees(last_name);\n\n-- Dropping an index\nDROP INDEX idx_lastname;\n```\n\n---\n\n## Transactions\n\nTransactions in SQL ensure data integrity by grouping SQL statements into atomic units, ensuring that either all statements are successfully executed or none of them are.\n\n```sql\n-- Beginning a transaction\nBEGIN TRANSACTION;\n\n-- Committing a transaction\nCOMMIT;\n\n-- Rolling back a transaction\nROLLBACK;\n```\n\n---\n\n## Stored Procedures\n\nStored procedures in SQL are precompiled SQL code stored in the database that can be executed with a single command, often used to encapsulate frequently executed tasks\n\n```sql\n-- Creating a stored procedure\nCREATE PROCEDURE get_employee (IN employee_id INT)\nBEGIN\n    SELECT * FROM employees WHERE employee_id = employee_id;\nEND;\n\n-- Executing a stored procedure\nCALL get_employee(100);\n\n-- Modifying a stored procedure\nALTER PROCEDURE get_employee (IN employee_id INT)\nBEGIN\n    SELECT employee_id, first_name, last_name FROM employees WHERE employee_id = employee_id;\nEND;\n\n-- Dropping a stored procedure\nDROP PROCEDURE IF EXISTS get_employee;\n```\n\n--- \n\n## Backup and Recovery\n\nBackup and recovery in SQL involves creating backups of databases to protect against data loss and restoring them in case of database failure or corruption.\n\n```sql\n-- Creating a full backup\nBACKUP DATABASE dbname TO disk = 'path_to_backup';\n\n-- Creating a differential backup\nBACKUP DATABASE dbname TO disk = 'path_to_backup' WITH DIFFERENTIAL;\n\n-- Creating a transaction log backup\nBACKUP LOG dbname TO disk = 'path_to_backup';\n\n-- Restoring from a backup\nRESTORE DATABASE dbname FROM disk = 'path_to_backup';\n```\n\n---\n\n## SQL Dialects and Vendor-Specific Extensions\n\nWhile SQL is a standardized language, different database vendors have implemented their own extensions and dialects, leading to slight variations in how SQL is written and executed across different RDBMSs. These variations can impact the syntax, functions, and features available to developers working with specific database systems.\n\nFor example, here are a few examples of vendor-specific SQL dialects and extensions:\n\n**Oracle SQL**:\n\n- Oracle SQL includes proprietary extensions like hierarchical queries, analytic functions, and the MODEL clause for data modeling.\n- Example: `SELECT CUBE(product, region) FROM sales;` (CUBE is an Oracle-specific extension for generating subtotals)\n\n**SQL Server (Microsoft)**:\n\n- SQL Server includes T-SQL (Transact-SQL), which extends standard SQL with features like control-of-flow language constructs, error handling, and procedural programming constructs.\n- Example: `SELECT ISNULL(column_name, 'default_value') FROM table_name;` (ISNULL is a T-SQL function)\n\n**MySQL**:\n\n- MySQL includes extensions like spatial data types and functions, window functions, and the REGEX operator for regular expression matching.\n- Example: `SELECT column_name REGEXP '^pattern' FROM table_name;` (REGEXP is a MySQL-specific operator)\n\n**PostgreSQL**:\n\n- PostgreSQL includes extensions like arrays, JSON support, full-text search, and range data types.\n- Example: `SELECT column_name || 'suffix' FROM table_name;` (|| is a PostgreSQL-specific string concatenation operator)\n\n\n![Differences between RDBMSs](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7m0q9jdx3opw29zja6j.png)\n\nSo the most logical way to go about is:\n1. **The Basics**: Know the basics of Relational Dabase Design: Entitnes, keys, Relationships, …. .\n2. **SQL**: Learn the fundamentals SQL as a standalone lanugage.\n3. **Pick RDBMs**: Pick one RDBMS that sweets you the most, and simply use it adhearing to all its special syntax and conspets.\n\n## Conclusion \n\nSQL is a vast field in itself, encompassing a multitude of concepts beyond what we've touched upon. Transactions, backups, and file management are just a few examples of the broader scope. However, for backend engineers like us, the fundamentals we've covered suffice as a foundational overview of SQL.","src/data/blog/sql-guide.mdx","d97c80b6fc939d37","webhook-service",{"id":76,"data":78,"body":88,"filePath":89,"digest":90,"deferredRender":28},{"pubDatetime":79,"image":80,"title":81,"draft":18,"tags":82,"category":86,"description":87},["Date","2025-04-25T00:00:00.000Z"],"/og-images/articles/webhook-service.png","Webhook Service | How To Approach System Design Interview + Practical Examplecategory",[47,83,84,85],"systemdesign","softwareengineering","interview","system-design","A complete guide to mastering Java, from the basics to advanced concepts.","![Cover Image](/og-images/articles/webhook-service.png)\n\n## Introduction\n\nSystem design is how you plan before you build. Not just code, but full picture: features, traffic, failures, scale and security. When you grow in level, company want you to think more, not just do more. Junior build, senior design before build. That's why system design interview show how senior you think.\n\n![Funny Illustration](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rsd8279j4iucs0kcp0dq.png)\n\n## 🔥 Motivation\n\nRecently I've been in a system design interview where, despite having most of the technical knowledge covered like queues, load balancers, API gateways, workers it wasn't the best experience due to lack of proper structure in answering system design questions. So, instead regretting the past, let's ensure better future experiences!\n\n## How To Approach a System Design Interview\n\n| 💡 Tip: Interviewer will definitely maintain an atmosphere of ambiguity and open ended scope, so instead of being confused, embrace it to show how well your thinking process is, and how you deal with problems as a true software engineer |\n| -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n\n### Step 1: Understand the Problem\n\nFirst thing, don't rush. Listen careful to what the interviewer is asking for. Ask questions back if something is not clear. Make sure you 100% understand what you need to build before you start talking.\n\n### Step 2: Define & Split Requirements To Two Parts\n\n- Functional Requirements: State what the system should do in clear separate bullet points.\n- Non Functional Requirements: How well the system do what it should do (Scalability, Security, Fault-tolerance).\n  Communicate them well, so the interviewer see you are thinking in full picture.\n\n### Step 3: Address Functional Requirements & High Level Design\n\n- Draw the big pieces. Like: client, server, database, cache, queue, load balancer.\n- Explain how they talk to each other. No need to go deep yet, just show that you know how to build a full system.\n\n### Step 4: Address Non Functional Requirements & Low Level Design\n\n- Walk through each and every part of the system and state how it can potentially fail and how you are planning to address or prevent that specific component's failure from failing the whole system.\n- Pick the potential bottlenecks in the system and discuss how u can scale them, like database by sharding it, or the consumer worker by spinning more replicas or the message queue by configuring it to write jobs to disk so in case of failure or restart it resumes from where it left.\n- Finally highlight potential security risks with the current system and address them.\n\n| 💡 Tip: It would be really beneficial especially at big companies if you can do some calculations regarding memory, throughput, how many requests per second the system can handle and those stuff using techniques like [Back of the envelope calculations](https://highscalability.com/google-pro-tip-use-back-of-the-envelope-calculations-to-choo/) |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n\n## Practical Example: Design a Webhook Service\n\n### Step 1: Understand the Problem\n\nWebhooks are way to get real-time updates from other systems. Unlike normal APIs where we keep asking: Any updates?... yooo anything new?.... webhooks push data to us when something happens. For example, Stripe sends us webhook when payment done, Shopify when order ships, GitHub when code pushed.\n\n### Step 2: Define & Split Requirements\n\n#### Functional Requirements\n\n- Accept webhook events from external systems\n- Process these events and do operations based on them\n- Save original event data and processing results for tracking\n\n#### Non-Functional Requirements\n\n- High availability: system must work even when parts fail\n- Security: Prevent webhook URL ID from being stolen, Rate limiting\n- At-least-once processing: each event must be processed at least once\n- Scalability: Can handle millions of requests per day\n\n### Step 3: Address Functional Requirements & High Level Design\n\nLet's start with basic design. When external system sends webhook event, our service needs to:\n\n1. Have API endpoint to receive event\n2. Process it\n3. Save it to database\n\nBasic design looks like:\n\n![High Level Design](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1bi6nte7z6dswms8fjwe.png)\n\nBut this design has problem: if handler fails after processing but before saving to database, we lose the event.\n\nBetter design with message queue:\n\n![Low Level Design](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8chyydmqbewdt17rxz82.png)\n\nHow this works:\n\n1. External system sends event to our API\n2. Request Handler accepts event and puts in message queue\n3. Request Handler sends 200 OK response\n4. Queue Consumer takes event from queue\n5. Queue Consumer processes event\n6. Queue Consumer saves result to database\n7. Once saved, event removed from queue\n\n### Step 4: Address Non-Functional Requirements & Low Level Design\n\n#### Handling Failures\n\n##### Request Handler Failures\n\n- If handler fails before putting event in queue: External system won't get 200 OK, so will retry\n- Use timeouts and circuit breakers to prevent hanging\n\n##### Message Queue Failures\n\n- Use durable queues that save messages to disk\n- Set up queue on multiple servers so if one fails, others work\n\n##### Queue Consumer Failures\n\n- Run multiple consumer instances\n- Only remove message from queue after successful database save\n- Auto-restart failed consumers\n\n##### Database Failures\n\n- Retry database writes with increasing delays\n- Set up database replication\n\n#### Security Concerns\n\n1. HMAC Signatures:\n\n   - External system and our service share secret key\n   - External system sends request with HMAC hash of payload\n   - Our service calculates same hash and compares\n   - If match, we know request is real\n\n2. IP Whitelisting:\n\n   - Only accept requests from known IP addresses\n\n3. Rate Limiting:\n   - Limit requests from same client (like 50 per minute)\n   - Prevents attacks that send too many requests (Dos attacks)\n\n#### Handling Duplicate and Out-of-Order Requests\n\n##### For Duplicates\n\n- Use idempotency keys: store unique ID for each event\n- Before processing, check if already seen this ID\n- Some message queues have built-in deduplication\n\n##### For Out-of-Order Events\n\n- Don't assume events arrive in correct order\n- Make processing logic handle any order\n- Example: if \"invoice.paid\" arrives before \"invoice.created\"\n  - Get latest data from source API\n  - Use timestamps to know which event is newer\n  - Skip processing outdated events\n\nBy following these steps, we create webhook service that's reliable, secure, and handles real-world problems like failures, duplicates, and out-of-order events.\n\n## Acknowledgment\n\n- [System Design Primer](https://github.com/donnemartin/system-design-primer)\n- [Design a Webhook Service #1](https://pyemma.github.io/How-to-Design-Webhook/)\n- [Desgin a Webhook Service #2](https://systemdesignschool.io/problems/webhook/solution)\n- [Design System Roadmap](https://roadmap.sh/system-design)","src/data/blog/webhook-service.mdx","1a1f7eb25dd28d8d","java",{"id":91,"data":93,"body":98,"filePath":99,"digest":100,"deferredRender":28},{"pubDatetime":94,"series":15,"image":95,"title":96,"draft":18,"tags":97,"category":20,"description":87},["Date","2024-04-11T00:00:00.000Z"],"/og-images/articles/java.jpg","Java 101, Zero to Hero Course",[20,21,22,23],"![Cover Image](/og-images/articles/java.jpg)\n\n## Introduction:\n\nYour introduction is engaging and sets a friendly tone for the blog. Here's a corrected version with some minor adjustments for clarity:\n\nWelcome to Java 101, where I'll take you on my personal journey of learning Java. In this comprehensive blog post, we'll cover everything you need to know about the Java language, from setting up your development environment to diving deep into object-oriented programming and exploring advanced concepts.\n\nJava is a versatile and powerful programming language used in a wide range of applications, from building web applications to developing mobile apps and enterprise systems. That's why it holds a special place in my heart.\n\nSo, get ready to embark on this adventure because it will be one of the longest blog posts I've ever written. I'll structure it as follows:\n\n1. Part 1: The Fundamentals (variables, data types, flow controls, logical operators, ...)\n2. Part 2: Object-Oriented Programming (Classes and Objects, Inheritance, Polymorphism, Encapsulation, Abstraction, Interfaces, ...)\n3. Part 3: Advanced Java Topics (Exceptions, Generics, Collections, Functional Programming, Concurrency, Multithreading)\n\nLet's dive in and explore the world of Java together!\n\n---\n\n## Language Fundamentals\n\nSure! Let's break down each part of data types in a simple and easy-to-understand way.\n\n#### Primitive Data Types\n\nPrimitive data types are the most basic building blocks of data in Java. They represent single values with no internal structure. Here are some common primitive data types:\n\n- **byte**: Represents a 1 byte whole number in the range [-128, 127].\n- **short**: Represents a 2 bytes whole number in the range [-32,768, 32,767].\n- **int**: Represents a 4 bytes whole number in a wide range.\n- **long**: Represents an 8 bytes whole number in a very wide range.\n- **float**: Represents a 4 bytes floating-point number, suitable for approximate representations of real numbers.\n- **double**: Represents an 8 bytes floating-point number, providing higher precision compared to float.\n- **boolean**: Represents true or false values.\n- **char**: Represents single characters like 'A', 'b', '%'.\n\nLet's see some examples:\n\n```java\nbyte age = 25;\nshort population = 32000;\nint distance = 150000;\nlong globalPopulation = 7760000000L; // Note the 'L' suffix for long literals\n\nfloat temperature = 20.5f; // Note the 'f' suffix for float literals\ndouble height = 5.9;\n\nboolean isSunny = true;\nchar grade = 'A';\n```\nIn this section, we've provided an overview of the sizes and ranges of various primitive data types in Java, including examples demonstrating their usage. Additionally, we introduced the `float` data type for representing floating-point numbers with approximate precision.\n\n#### Reference Data Types\n\nReference data types refer to objects in Java. Unlike primitive data types, they have complex structures and are stored in memory dynamically. Here are some examples of reference data types:\n\n- **String**: Represents a sequence of characters, like \"Hello, World!\".\n- **Array**: Represents a collection of elements of the same type.\n\nLet's see how we can use them:\n\n```java\nString name = \"Alice\";\nint[] numbers = {1, 2, 3, 4, 5};\n```\n\nHere, `name` is a String that stores the name \"Alice\", and `numbers` is an array of integers.\n\n#### Input Reading Techniques\n\nIn Java, we can read input from the user using the `Scanner` class. Here's how we can use it to read integers and strings:\n\n```java\nimport java.util.Scanner;\n\npublic class InputExample {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        System.out.print(\"Enter your age: \");\n        int age = scanner.nextInt();\n        \n        System.out.print(\"Enter your name: \");\n        String name = scanner.next();\n        \n        System.out.println(\"Hello, \" + name + \"! You are \" + age + \" years old.\");\n        \n        scanner.close(); // Don't forget to close the scanner to release resources.\n    }\n}\n```\n\nWhen you run this program, it will prompt you to enter your age and name. Then it will print a greeting message with your input values.\n\nThat's it! These are the basics of data types in Java, explained in a simple and easy-to-understand way. Feel free to experiment with these examples to deepen your understanding!\n\nAbsolutely! Let's break down each concept of control flow with code examples for better understanding:\n\n#### Comparison Operators\n\nComparison operators are used to compare two values and return a boolean result. Here are some common comparison operators:\n\n- **Equal to (`==`)**: Returns true if two values are equal.\n- **Not equal to (`!=`)**: Returns true if two values are not equal.\n- **Greater than (`>`)**: Returns true if the left operand is greater than the right operand.\n- **Greater than or equal to (`>=`)**: Returns true if the left operand is greater than or equal to the right operand.\n- **Less than (`\u003C`)**: Returns true if the right operand is greater than the left operand.\n- **Less than or equal to (`\u003C=`)**: Returns true if the left operand is less than or equal to the right operand.\n\n```java\nint x = 5;\nint y = 10;\n\nSystem.out.println(x == y);  // Outputs: false\nSystem.out.println(x != y);  // Outputs: true\nSystem.out.println(x > y);   // Outputs: false\nSystem.out.println(x \u003C y);   // Outputs: true\nSystem.out.println(x >= y);  // Outputs: false\nSystem.out.println(x \u003C= y);  // Outputs: true\n```\n\n#### Logical Operators\n\nLogical operators are used to perform logical operations on boolean expressions. Here are the common logical operators:\n\n- **AND (`&&`)**: Returns true if both operands are true.\n- **OR (`||`)**: Returns true if at least one of the operands is true.\n- **NOT (`!`)**: Returns the opposite of the operand's boolean value.\n\n```java\nboolean isSunny = true;\nboolean isWarm = false;\n\nSystem.out.println(isSunny && isWarm);  // Outputs: false\nSystem.out.println(isSunny || isWarm);  // Outputs: true\nSystem.out.println(!isSunny);           // Outputs: false\n```\n\n#### Conditional Statements (if, else-if, else)\n\nConditional statements are used to execute different blocks of code based on certain conditions.\n\n```java\nint age = 20;\n\nif (age >= 18) {\n    System.out.println(\"You are an adult.\");\n} else if (age >= 13) {\n    System.out.println(\"You are a teenager.\");\n} else {\n    System.out.println(\"You are a child.\");\n}\n```\n\n#### Ternary Operator\n\nThe ternary operator is a shorthand way of writing if-else statements.\n\n```java\nint num = 10;\nString result = (num % 2 == 0) ? \"even\" : \"odd\";\nSystem.out.println(result);  // Outputs: even\n```\n\n#### Switch Statements\n\nSwitch statements allow us to execute different blocks of code based on the value of a variable.\n\n```java\nint day = 3;\nString dayName;\n\nswitch (day) {\n    case 1:\n        dayName = \"Monday\";\n        break;\n    case 2:\n        dayName = \"Tuesday\";\n        break;\n    // ...\n    default:\n        dayName = \"Invalid day\";\n}\n\nSystem.out.println(\"Today is \" + dayName);\n```\n\n#### Iterative Statements\n\nIterative statements are used to execute a block of code repeatedly.\n\n##### For Loops\n\n```java\nfor (int i = 1; i \u003C= 5; i++) {\n    System.out.println(\"Count: \" + i);\n}\n```\n\n##### Enhanced For Each Loop\n\n```java\nint[] numbers = {1, 2, 3, 4, 5};\n\nfor (int num : numbers) {\n    System.out.println(num);\n}\n```\n\n##### While Loops\n\n```java\nint i = 1;\nwhile (i \u003C= 5) {\n    System.out.println(\"Count: \" + i);\n    i++;\n}\n```\n\n##### Do-While Loops\n\n```java\nint j = 1;\ndo {\n    System.out.println(\"Count: \" + j);\n    j++;\n} while (j \u003C= 5);\n```\n\n#### Exercise\n\nNow after we are done with java fundamentals, lets take all what we've learned so far and package it a nice, simple and basic calculator\n\n```java\nimport java.util.Scanner;\n\npublic class Calculator {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        System.out.println(\"Welcome to the Simple Calculator!\");\n        System.out.println(\"Please enter the first number:\");\n        double num1 = scanner.nextDouble();\n        \n        System.out.println(\"Please enter the second number:\");\n        double num2 = scanner.nextDouble();\n        \n        System.out.println(\"Select operation:\");\n        System.out.println(\"1. Addition (+)\");\n        System.out.println(\"2. Subtraction (-)\");\n        System.out.println(\"3. Multiplication (*)\");\n        System.out.println(\"4. Division (/)\");\n        \n        int choice = scanner.nextInt();\n        double result = 0;\n        \n        switch (choice) {\n            case 1:\n                result = num1 + num2;\n                break;\n            case 2:\n                result = num1 - num2;\n                break;\n            case 3:\n                result = num1 * num2;\n                break;\n            case 4:\n                if (num2 != 0) {\n                    result = num1 / num2;\n                } else {\n                    System.out.println(\"Error! Division by zero is not allowed.\");\n                    return;\n                }\n                break;\n            default:\n                System.out.println(\"Invalid choice!\");\n                return;\n        }\n        \n        System.out.println(\"Result: \" + result);\n        \n        scanner.close();\n    }\n}\n```\n\n---\n\n## Object Oriented Programming in java\n\nJava is indeed a versatile programming language that supports multiple programming paradigms, including procedural, functional, and object-oriented programming (OOP). However, the OOP paradigm is the primary one in Java, as it focuses on modeling real-world entities as objects, which have attributes (data) and behaviors (methods).\n\nLet's dive together into the different concepts and aspects of the OOP world in Java.\n\nAbsolutely! Let's break down each topic using simple language, analogies, and plenty of code examples.\n\n### Understanding Classes and Objects\n\nThink of a class as a blueprint and an object as something built from that blueprint. For example, a class \"Car\" would define what a car is (its attributes like color, make, and model, and behaviors like driving and honking), while an object would be a specific car built from that blueprint.\n\n#### Creating and Instantiating Classes\n\nTo create a class, you define its attributes and behaviors. To create an object, you use the class blueprint. Here's an example of a class and how to create an object from it:\n\n```java\n// Class definition\nclass Car {\n    String color;\n    String make;\n    String model;\n    \n    void drive() {\n        System.out.println(\"The car is driving.\");\n    }\n}\n\n// Creating an object\nCar myCar = new Car();\n```\n\n#### Encapsulation\n\nEncapsulation is like putting your things in a box and only allowing certain people to access them. In Java, you can hide the inner workings of a class and only allow access through specific methods, like getter and setter methods.\n\n```java\nclass BankAccount {\n    private double balance;\n    \n    // Getter method\n    public double getBalance() {\n        return balance;\n    }\n    \n    // Setter method\n    public void setBalance(double amount) {\n        balance = amount;\n    }\n}\n```\n\n#### Abstraction\n\nAbstraction is like driving a car without needing to know how the engine works. You interact with the car (object) using its interface (methods) without needing to understand its internal implementation.\n\n#### Constructors\n\nConstructors are like a special recipe used to create an object. They initialize the object's state when it's created. Here's an example:\n\n```java\nclass Dog {\n    String breed;\n    \n    // Constructor\n    public Dog(String dogBreed) {\n        breed = dogBreed;\n    }\n}\n```\n\n#### Polymorphism\n\nPolymorphism is like a shape-shifter. An object can take on different forms depending on its context. Method overloading is one example:\n\n```java\nclass MathOperations {\n    // Method overloading\n    public int add(int x, int y) {\n        return x + y;\n    }\n    \n    public double add(double x, double y) {\n        return x + y;\n    }\n}\n```\n\n#### Inheritance\n\nInheritance is like passing down traits from parent to child. A subclass inherits attributes and behaviors from its superclass. For example:\n\n```java\nclass Animal {\n    void eat() {\n        System.out.println(\"The animal is eating.\");\n    }\n}\n\nclass Dog extends Animal {\n    void bark() {\n        System.out.println(\"The dog is barking.\");\n    }\n}\n```\n\n#### Static Members\n\nStatic members are like shared resources among all objects of a class. They belong to the class itself rather than any specific object. For example:\n\n```java\nclass Circle {\n    static final double PI = 3.14;\n    \n    static double calculateArea(double radius) {\n        return PI * radius * radius;\n    }\n}\n```\n\nAbsolutely! Let's delve into each aspect of inheritance in Java with detailed explanations, code examples, and analogies.\n\n### Overview of Inheritance\n\nInheritance is like passing down traits from parents to their children. In Java, it allows a class (subclass) to inherit attributes and behaviors from another class (superclass). This promotes code reuse and helps in organizing and managing related classes.\n\n#### The Object Class and Its Core Methods\n\nIn Java, every class implicitly extends the `Object` class. The `Object` class provides several core methods that are available to all classes. Some of these methods include:\n\n- `toString()`: Returns a string representation of the object.\n- `equals(Object obj)`: Indicates whether some other object is \"equal to\" this one.\n- `hashCode()`: Returns a hash code value for the object.\n\n```java\nclass MyClass {\n    int value;\n\n    // toString method override\n    @Override\n    public String toString() {\n        return \"Value: \" + value;\n    }\n}\n\nMyClass obj = new MyClass();\nobj.value = 10;\nSystem.out.println(obj.toString());  // Outputs: Value: 10\n```\n\n#### Object Comparison\n\nJava provides the `equals()` method for comparing objects for equality. By default, it compares memory references. However, you can override this method in your classes to provide custom comparison logic.\n\n```java\nclass Person {\n    String name;\n    int age;\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null || getClass() != obj.getClass())\n            return false;\n        Person person = (Person) obj;\n        return age == person.age && Objects.equals(name, person.name);\n    }\n}\n```\n\n#### Method Overriding\n\nMethod overriding allows a subclass to provide a specific implementation of a method that is already defined in its superclass. This is useful for providing specialized behavior.\n\n```java\nclass Animal {\n    void makeSound() {\n        System.out.println(\"Animal makes a sound\");\n    }\n}\n\nclass Dog extends Animal {\n    @Override\n    void makeSound() {\n        System.out.println(\"Dog barks\");\n    }\n}\n```\n\n#### Abstract Classes\n\nAbstract classes are like blueprints for other classes. They cannot be instantiated themselves but can have abstract methods that must be implemented by subclasses.\n\n```java\nabstract class Shape {\n    abstract double area();\n}\n\nclass Circle extends Shape {\n    double radius;\n\n    @Override\n    double area() {\n        return Math.PI * radius * radius;\n    }\n}\n```\n\n#### Final Classes\n\nFinal classes are like finished products that cannot be modified or extended. You can't create subclasses of a final class.\n\n```java\nfinal class FinalClass {\n    // Class definition\n}\n\n// Error: Cannot inherit from final class\nclass SubClass extends FinalClass {\n}\n```\n\n---\n\n### Interfaces in Java\n\nThink of an interface as a contract or a set of rules that a class must follow. It defines a list of methods that implementing classes must provide, but it doesn't contain any implementation itself.\n\n```java\n// Interface definition\ninterface Animal {\n    void makeSound();\n    void eat();\n}\n\n// Implementing class\nclass Dog implements Animal {\n    @Override\n    public void makeSound() {\n        System.out.println(\"Dog barks\");\n    }\n\n    @Override\n    public void eat() {\n        System.out.println(\"Dog eats bones\");\n    }\n}\n```\n\nIn this example, the `Animal` interface defines two methods: `makeSound()` and `eat()`. The `Dog` class implements these methods according to the contract specified by the `Animal` interface.\n\n#### Key Features and Usage Scenarios\n\nInterfaces provide several key features and are commonly used in various scenarios:\n\n- **Multiple Inheritance**: Unlike classes, a Java class can implement multiple interfaces. This allows a class to inherit behavior from multiple sources.\n\n```java\ninterface Flyable {\n    void fly();\n}\n\nclass Bird implements Animal, Flyable {\n    // Implement methods from both Animal and Flyable interfaces\n}\n```\n\n- **Polymorphism**: Interfaces enable polymorphic behavior, allowing objects to be treated as instances of their interface type. This promotes flexibility and code reusability.\n\n```java\nvoid performAction(Animal animal) {\n    animal.makeSound();\n    animal.eat();\n}\n```\n\n- **Loose Coupling**: Interfaces facilitate loose coupling between components of a system. Classes interact with each other through interfaces rather than concrete implementations, making the system more modular and easier to maintain.\n\n```java\ninterface DataAccess {\n    void saveData(String data);\n}\n\nclass DatabaseAccess implements DataAccess {\n    @Override\n    public void saveData(String data) {\n        // Save data to the database\n    }\n}\n\nclass FileAccess implements DataAccess {\n    @Override\n    public void saveData(String data) {\n        // Save data to a file\n    }\n}\n```\n\nIn this example, different classes can implement the `DataAccess` interface to provide different ways of saving data, such as to a database or a file.\n\n\nInterfaces serve as powerful tools in Java programming, providing a way to define contracts, enable polymorphic behavior, and promote loose coupling between components. They are essential for building modular, flexible, and maintainable software systems.\n\n### Exercise\nusing all what we learned in this section about OOP in java let's rebuild our calculator in object oriented style:\n\n```java\n// Interface for basic calculator operations\ninterface Calculator {\n    double calculate(double num1, double num2);\n}\n\n// Addition operation\nclass Addition implements Calculator {\n    @Override\n    public double calculate(double num1, double num2) {\n        return num1 + num2;\n    }\n}\n\n// Subtraction operation\nclass Subtraction implements Calculator {\n    @Override\n    public double calculate(double num1, double num2) {\n        return num1 - num2;\n    }\n}\n\n// Multiplication operation\nclass Multiplication implements Calculator {\n    @Override\n    public double calculate(double num1, double num2) {\n        return num1 * num2;\n    }\n}\n\n// Division operation\nclass Division implements Calculator {\n    @Override\n    public double calculate(double num1, double num2) {\n        if (num2 != 0) {\n            return num1 / num2;\n        } else {\n            throw new IllegalArgumentException(\"Error! Division by zero is not allowed.\");\n        }\n    }\n}\n\n// Calculator class encapsulating calculator operations\nclass BasicCalculator {\n    private Calculator calculator;\n\n    public BasicCalculator(Calculator calculator) {\n        this.calculator = calculator;\n    }\n\n    public double performCalculation(double num1, double num2) {\n        return calculator.calculate(num1, num2);\n    }\n}\n\npublic class CalculatorApp {\n    public static void main(String[] args) {\n        BasicCalculator calculator = new BasicCalculator(new Addition());\n        double result = calculator.performCalculation(10, 5);\n        System.out.println(\"Addition Result: \" + result);\n\n        calculator = new BasicCalculator(new Subtraction());\n        result = calculator.performCalculation(10, 5);\n        System.out.println(\"Subtraction Result: \" + result);\n\n        calculator = new BasicCalculator(new Multiplication());\n        result = calculator.performCalculation(10, 5);\n        System.out.println(\"Multiplication Result: \" + result);\n\n        calculator = new BasicCalculator(new Division());\n        result = calculator.performCalculation(10, 5);\n        System.out.println(\"Division Result: \" + result);\n    }\n}\n```\n\n\n## Advance Java Topics\n\n\n### Exception Handling?\n\nThink of exceptions as unexpected events that can happen while your Java program is running. Just like when you're playing a game and suddenly something unexpected happens, like the power going out or your controller running out of batteries.\n\n#### Checked Exceptions:\n\nThese are like warning signs that you can anticipate. It's like knowing that if you're playing with a ball indoors, it might break something. So, you handle it by playing more carefully. In Java, you're forced to handle these kinds of exceptions, either by catching them or declaring that your method might throw them.\n\n#### Unchecked Exceptions:\n\nThese are the sneaky surprises you didn't see coming. It's like accidentally stepping on a Lego piece while walking barefoot. Ouch! These exceptions are not forced to be handled explicitly, but you should still try to handle them to keep your program safe.\n\n#### Try-Catch Blocks:\n\nImagine you're catching a ball. You extend your hands, try to catch it, and if you miss, it falls on the ground. In Java, you use `try` to attempt something that might throw an exception, and then you `catch` the exception if it happens, just like catching a ball to prevent it from crashing on the ground.\n\n```java\ntry {\n    // Code that might throw an exception\n} catch (ExceptionType e) {\n    // Code to handle the exception\n}\n```\n\n#### Finally Block:\n\nThis is like a safety net. No matter what happens, this block of code always runs. It's like cleaning up after playing with your toys. In Java, you use `finally` to ensure that some code gets executed, whether an exception occurs or not.\n\n```java\ntry {\n    // Code that might throw an exception\n} catch (ExceptionType e) {\n    // Code to handle the exception\n} finally {\n    // Code that always runs\n}\n```\n\n#### Throw and Throws:\n\nSometimes you want to be the one causing the exception. It's like saying, \"I'm not playing anymore, and I'm throwing the ball back.\" In Java, you use `throw` to throw an exception manually. And `throws` is like passing the responsibility to someone else. You declare that your method might throw a certain type of exception, leaving it to the caller to handle.\n\n```java\nvoid myMethod() throws MyException {\n    // Code that might throw MyException\n}\n\n// Somewhere else in the code\ntry {\n    myMethod();\n} catch (MyException e) {\n    // Handle MyException\n}\n```\n\n### Generics:\n\nGenerics in Java are like magical containers that can hold any type of data. They provide flexibility and type-safety to your code, ensuring that you can work with different types seamlessly. Let's dive deeper into the magical world of generics!\n\n#### Generics in Classes:\n\nImagine a treasure chest that can hold various treasures – gold coins, precious gems, or ancient artifacts. In Java, you can create generic classes using `\u003CT>`, where `T` represents a type parameter.\n\n```java\npublic class TreasureChest\u003CT> {\n    private T treasure;\n\n    public void store(T item) {\n        this.treasure = item;\n    }\n\n    public T retrieve() {\n        return this.treasure;\n    }\n}\n```\n\n#### Generics in Methods:\n\nNow, envision a wand that can cast spells on any object. In Java, you can create generic methods that operate on different types of data, enhancing code reusability and flexibility.\n\n```java\npublic class Magic {\n    public \u003CT> void castSpell(T target) {\n        // Perform magic on the target\n    }\n}\n```\n\n#### Wildcards:\n\nWildcards in Java generics are like special lenses that allow you to view your code from different perspectives. Let's venture deeper into the jungle of generics and uncover the secrets of wildcards!\n\n#### Upper Bounded Wildcards (`\u003C? extends T>`):\n\nImagine a magical net that captures all creatures with specific characteristics. In Java, `\u003C? extends T>` captures all objects of a type that is a subtype of `T`, allowing you to work with a broad range of data.\n\n```java\npublic void feedHerbivores(List\u003C? extends Animal> herbivores) {\n    // Feed the herbivores\n}\n```\n\n#### Lower Bounded Wildcards (`\u003C? super T>`):\n\nNow, picture a protective barrier that shields against specific dangers. In Java, `\u003C? super T>` specifies a lower bound for the wildcard and captures all objects that are superclasses of `T`, ensuring safety and security in your code.\n\n```java\npublic void protectAgainstPredators(List\u003C? super Lion> protections) {\n    // Set up protections against predators\n}\n```\n\n#### Generic Methods:\n\nJust as a skilled magician can perform various tricks with a single wand, generic methods in Java can operate on different types of data, enhancing code flexibility and versatility.\n\n```java\npublic \u003CT> void performAction(T item) {\n    // Perform action on the item\n}\n```\n\n#### Generic Classes with Multiple Type Parameters:\n\nImagine a treasure map with multiple clues leading to hidden riches. In Java, you can create generic classes with multiple type parameters, allowing you to handle various types of data simultaneously.\n\n```java\npublic class TreasureMap\u003CX, Y> {\n    private X clue1;\n    private Y clue2;\n    \n    // Constructor, getters, and setters\n}\n```\n\n### Collections:\n\nImagine you're on a quest to collect rare treasures scattered across a magical kingdom. Java collections are like your trusty backpacks, equipped with special compartments to store and organize your treasures. Whether it's shiny gems, ancient artifacts, or mystical potions, collections in Java provide a versatile way to manage and manipulate your data.\n\n#### Collections are just Interfaces!:\n\nIn Java, collections are represented by a variety of interfaces, each with its unique characteristics and abilities. Think of interfaces as blueprints for different types of backpacks, each designed for specific purposes.\n\n```java\nList\u003CString> backpack = new ArrayList\u003C>();  // A backpack for storing a list of treasures\nSet\u003CInteger> pouch = new HashSet\u003C>();       // A pouch for storing unique treasures\nMap\u003CString, Integer> chest = new HashMap\u003C>();// A chest for storing treasures with keys\n```\n\n#### Collection Types:\n\n###### Lists:\n\nImagine a list of treasures neatly arranged in a row, like books on a shelf. In Java, lists allow you to store a collection of elements in a specific order, making it easy to access and manipulate them.\n\n```java\nList\u003CString> backpack = new ArrayList\u003C>();\nbackpack.add(\"Golden Sword\");\nbackpack.add(\"Enchanted Ring\");\nbackpack.add(\"Magic Potion\");\n```\n\n###### Sets:\n\nNow picture a set of unique treasures, like a collection of rare gems. In Java, sets ensure that each element is unique, preventing duplicates and providing fast retrieval.\n\n```java\nSet\u003CString> pouch = new HashSet\u003C>();\npouch.add(\"Ruby\");\npouch.add(\"Emerald\");\npouch.add(\"Sapphire\");\n```\n\n###### Maps:\n\nFinally, envision a treasure map with clues leading to hidden riches. In Java, maps associate keys with values, allowing you to retrieve treasures based on their unique identifiers.\n\n```java\nMap\u003CString, Integer> chest = new HashMap\u003C>();\nchest.put(\"Gold Coins\", 100);\nchest.put(\"Silver Bars\", 50);\nchest.put(\"Diamonds\", 10);\n```\n\n#### Iterating Through Collections:\n\nJust as you explore the vast landscapes of a kingdom, you can traverse through collections using iterators, uncovering treasures along the way.\n\n```java\nfor (String treasure : backpack) {\n    System.out.println(\"Found: \" + treasure);\n}\n```\n\n#### Sorting Collections:\n\nImagine arranging your treasures in order of value, from least to most precious. In Java, you can sort collections using comparators, ensuring that your treasures are organized efficiently.\n\n```java\nCollections.sort(backpack);\n```\n\n#### Manipulating Collections:\n\nNow envision combining two collections to create an even larger collection of treasures. In Java, you can manipulate collections using various methods, such as merging, filtering, and transforming them.\n\n```java\nList\u003CString> additionalTreasures = new ArrayList\u003C>();\nadditionalTreasures.add(\"Magic Wand\");\nbackpack.addAll(additionalTreasures);\n```\n### Functional Programming:\n\nImagine you're a wizard in a magical kingdom, wielding powerful spells to manipulate the forces of nature. Functional programming in Java is like mastering the ancient art of spellcasting, allowing you to perform powerful transformations on your data with ease.\n\n#### Lambda Expressions:\n\nIn Java, lambda expressions are like enchanted spells, allowing you to encapsulate behavior and pass functions as parameters to other methods.\n\n```java\n// Traditional way of defining a Runnable\nRunnable runnable = new Runnable() {\n    @Override\n    public void run() {\n        System.out.println(\"Hello, world!\");\n    }\n};\n\n// Using lambda expression\nRunnable runnable = () -> {\n    System.out.println(\"Hello, world!\");\n};\n```\n\n#### Suppliers:\n\nPicture a mystical shopkeeper who can conjure any item you desire out of thin air. In Java, suppliers are like that shopkeeper, providing a way to lazily generate or supply values when needed.\n\n```java\nSupplier\u003CInteger> randomNumber = () -> (int) (Math.random() * 100);\nSystem.out.println(randomNumber.get());  // Output: A random number between 0 and 100\n```\n\n#### Predicates:\n\nImagine you're a wise wizard who can discern truth from falsehood with a single glance. In Java, predicates are like your magical eyes, allowing you to test conditions and filter elements based on those conditions.\n\n```java\nPredicate\u003CInteger> isEven = num -> num % 2 == 0;\nSystem.out.println(isEven.test(4));  // Output: true\nSystem.out.println(isEven.test(5));  // Output: false\n```\n\n#### Consumers:\n\nNow, envision a benevolent fairy who consumes your worries and leaves behind a sense of peace. In Java, consumers are like that fairy, accepting values and performing actions on them without returning anything.\n\n```java\nConsumer\u003CString> printUpperCase = str -> System.out.println(str.toUpperCase());\nprintUpperCase.accept(\"magic\");  // Output: MAGIC\n```\n\n#### Functions:\n\nFinally, imagine a magical alchemist who transforms one substance into another. In Java, functions are like that alchemist, taking one input and producing another output based on some transformation.\n\n```java\nFunction\u003CInteger, String> convertToString = num -> \"Number: \" + num;\nSystem.out.println(convertToString.apply(42));  // Output: Number: 42\n```\n\n### Java Streams:\n\nIn Java, streams are sequences of elements that support various methods to perform operations on those elements. Think of them as magical conduits that flow through your data, allowing you to perform actions on each element as it passes through.\n\n#### Functional Interfaces in Streams\n\nStreams use functional interfaces to perform their work. These interfaces, such as consumers, predicates, suppliers, and functions, provide blueprints for behaviors that can be passed to stream operations.\n\n#### Consumers in streams:\n\nConsumers are like magical observers that accept a single input and perform some action on it without returning anything. In streams, consumers are used to perform terminal operations that consume the elements of the stream.\n\n```java\nList\u003CString> ingredients = Arrays.asList(\"Eye of newt\", \"Wing of bat\", \"Tooth of wolf\");\n\n// Printing each ingredient using a consumer\ningredients.stream()\n           .forEach(System.out::println);\n```\n\n#### Predicates in streams:\n\nPredicates are like magical filters that test conditions and return true or false. In streams, predicates are used to filter elements based on certain criteria.\n\n```java\n// Filtering ingredients that contain \"bat\"\ningredients.stream()\n           .filter(ingredient -> ingredient.contains(\"bat\"))\n           .forEach(System.out::println);\n```\n\n#### Suppliers in streams:\n\nSuppliers are like magical providers that lazily generate or supply values when needed. In streams, suppliers are not as commonly used directly, but they play a role in certain stream operations.\n\n```java\n// Generating a stream of random numbers using a supplier\nStream\u003CInteger> randomNumberStream = Stream.generate(() -> (int) (Math.random() * 100));\n```\n\n#### Functions in streams:\n\nFunctions are like magical transformers that take one input and produce another output based on some transformation. In streams, functions are used for mapping elements to another form.\n\n```java\n// Converting ingredients to uppercase using a function\ningredients.stream()\n           .map(String::toUpperCase)\n           .forEach(System.out::println);\n```\n\n### Concurrency and Multithreading:\n\nConcurrency is the ability of a program to execute multiple tasks simultaneously, allowing it to make progress on more than one task at a time.\n\n#### What are Threads?\n\nThreads are like individual sailors on your ship, each responsible for carrying out a specific task. In Java, you can create and manage threads to perform tasks concurrently.\n\n#### Creating Threads:\n\nIn Java, you can create threads by extending the Thread class or implementing the Runnable interface. Let's create a simple thread that prints a message.\n\n```java\nclass MyThread extends Thread {\n    public void run() {\n        System.out.println(\"Hello from MyThread!\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        MyThread thread = new MyThread();\n        thread.start(); // Start the thread\n    }\n}\n```\n\n#### Implementing Runnable:\n\nAlternatively, you can implement the Runnable interface and pass it to a Thread object.\n\n```java\nclass MyRunnable implements Runnable {\n    public void run() {\n        System.out.println(\"Hello from MyRunnable!\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Thread thread = new Thread(new MyRunnable());\n        thread.start(); // Start the thread\n    }\n}\n```\n\n#### Synchronization:\n\nImagine your sailors trying to access a shared resource, like a treasure chest, simultaneously. Synchronization in Java ensures that only one thread can access a critical section of code at a time, preventing conflicts and ensuring thread safety.\n\n```java\nclass Counter {\n    private int count = 0;\n\n    public synchronized void increment() {\n        count++;\n    }\n\n    public synchronized int getCount() {\n        return count;\n    }\n}\n```\n\n#### Executors:\n\nThink of executors as managers who oversee a group of sailors (threads) and assign them tasks efficiently. Executors provide a higher-level abstraction for managing threads and executing tasks asynchronously.\n\n```java\nExecutorService executor = Executors.newFixedThreadPool(5);\nexecutor.submit(new MyTask());\nexecutor.shutdown();\n```\n\n## Conclusion\n\nIn this comprehensive guide, we've journeyed through the fundamental concepts of Java programming, explored the intricacies of object-oriented programming (OOP), and delved into advanced topics that unlock the full potential of Java. From setting up your development environment to mastering control flow, classes, objects, inheritance, interfaces, and beyond, you've gained a solid understanding of Java's core principles and features.\n\nAs we conclude our exploration of Java 101, it's clear that you've taken significant strides on your path to becoming a proficient Java programmer. Armed with this knowledge, you're well-equipped to tackle real-world coding challenges and embark on exciting projects with confidence.\n\nBut the journey doesn't end here. In our next adventure, we'll delve into the fascinating world of data structures and algorithms—the cornerstone of computer science and software development. Together, we'll unravel the mysteries of data organization, algorithmic efficiency, and problem-solving techniques that will elevate your coding skills to new heights.\n\nSo, stay tuned for our next chapter as we continue our quest for mastery in the realms of programming and software development. Until then, keep coding, keep learning, and let your passion for Java ignite your journey towards excellence!","src/data/blog/java.mdx","2fb373a53f50a0a9","projects",["Map",103,104,121,122],"bytebox",{"id":103,"data":105,"body":118,"filePath":119,"digest":120,"deferredRender":28},{"name":106,"technologies":107,"description":115,"sourceCode":116,"type":117},"ByteBox | Cloud File Storage via Telegram",[108,109,110,111,112,113,114],"nextjs","mongodb","telegram-api","tailwindcss","zustand","vercel","nodejs","A privacy-first cloud storage solution using Telegram bots to handle file uploads, bypassing traditional cloud costs. Features secure file storage, folder structure, and instant Telegram delivery.","https://github.com/geetansh810/GDrive","core","# ByteBox | Telegram-Based Cloud Storage\n\n## Project Manifesto\n\n### Introduction\nByteBox is a privacy-focused, serverless file storage platform that allows users to upload and organize files online, which are then routed securely to their personal Telegram via bots. The goal is to eliminate storage costs while ensuring fast, reliable access to files.\n\nIt offers a familiar folder-based UI and supports uploads, folder creation, and file sharing—all powered by a real-time backend integrated with the Telegram Bot API.\n\n---\n\n## 🌟 Key Features\n### 📁 File Management\n- **Upload Files** – Upload any file type and access it instantly through Telegram.\n- **Folder Structure** – Organize files in nested folders, mimicking native OS behavior.\n- **Instant Delivery** – Files are sent in real-time to users via Telegram bots.\n\n### 🔒 Security & Performance\n- **Serverless Backend** – Uses Telegram as a data store, reducing cloud hosting cost by 90%.\n- **Access Control** – Only the logged-in user can view/download files.\n- **99.9% Uptime** – Hosted on Vercel and optimized for performance.\n\n---\n\n## 🛠 Tech Stack\n\n- **Frontend:** Next.js, TailwindCSS, Zustand\n- **Backend:** Node.js, Telegram Bot API\n- **Database:** MongoDB\n- **Hosting:** Vercel\n\n---\n\n## 🎯 Vision & Goals\n\nByteBox aims to offer an alternative cloud storage experience where cost-efficiency and privacy go hand-in-hand. With real-time Telegram integration and an intuitive UI, ByteBox reduces complexity and offers a unique take on file ownership and control.\n\n---\n\n## 🤝 Contributing & Support\n\nContributions are welcome! Whether it's adding new features, improving UI, or optimizing storage handling—every bit helps. Feel free to fork the repo, explore the codebase, and share feedback.\n\n🔗 [GitHub Repository](https://github.com/geetansh810/GDrive)\n\n---\n\nBuilt with ❤️ for makers who want control without cloud cost.","src/data/projects/bytebox.mdx","f8dfff02bc14cf33","vibe-chat-app",{"id":121,"data":123,"body":133,"filePath":134,"digest":135,"deferredRender":28},{"name":124,"technologies":125,"description":131,"sourceCode":132,"type":117},"Vibe | Real-Time Chat App",[126,127,128,129,130,109,114],"reactjs","redux","socket.io","webrtc","express","A real-time chat and video calling platform built with WebRTC and Socket.IO, supporting authenticated messaging, user profiles, and dynamic presence tracking.","https://github.com/geetansh810/vibe-chat-app","# Vibe | Real-Time Chat + Video Calling App\n\n## Project Manifesto\n\n### Introduction\nVibe is a real-time communication platform designed to support instant messaging and peer-to-peer video calls. Built with React and WebRTC, it delivers a seamless chat experience, enabling users to connect and communicate securely.\n\nUsers can create accounts, manage profiles, chat in real time using Socket.IO, and launch video calls without external tools.\n\n---\n\n## 🌟 Key Features\n### 💬 Messaging\n- **Real-Time Chat** – Send and receive messages instantly using WebSockets.\n- **Typing Indicators** – Know when someone is responding in real time.\n- **Authentication** – JWT-secured access and profile management.\n\n### 🎥 Video Calling\n- **WebRTC Integration** – High-quality peer-to-peer video calls without third-party tools.\n- **Call Management** – Initiate, accept, or decline calls via the custom UI.\n- **Low Latency** – Optimized signaling and STUN server usage for fast connections.\n\n---\n\n## 🛠 Tech Stack\n\n- **Frontend:** ReactJS, Redux\n- **Backend:** Node.js, Express, Socket.IO, WebRTC\n- **Database:** MongoDB\n\n---\n\n## 🎯 Vision & Goals\n\nVibe’s goal is to bring lightweight, real-time collaboration features into a single app experience. It demonstrates how modern web technologies can power scalable, P2P communication at minimal infrastructure cost.\n\n---\n\n## 🤝 Contributing & Support\n\nWe’re open to contributions in UI, performance, and feature expansion. Come join and help shape the future of real-time apps.\n\n🔗 [GitHub Repository](https://github.com/geetansh810/vibe-chat-app)\n\n---\n\nBuilt with ❤️ for real-time web lovers.","src/data/projects/vibe-chat-app.mdx","afe7c0124a23f14c"]